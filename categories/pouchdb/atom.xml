<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PouchDB | Mirco Zeiss]]></title>
  <link href="http://mircozeiss.com/categories/pouchdb/atom.xml" rel="self"/>
  <link href="http://mircozeiss.com/"/>
  <updated>2014-02-02T14:16:05+01:00</updated>
  <id>http://mircozeiss.com/</id>
  <author>
    <name><![CDATA[Mirco Zeiss]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PouchDB vs. Couchbase Lite - a performance review]]></title>
    <link href="http://mircozeiss.com/pouchdb-vs-couchbase-lite-a-performance-review/"/>
    <updated>2013-12-04T13:25:00+01:00</updated>
    <id>http://mircozeiss.com/pouchdb-vs-couchbase-lite-a-performance-review</id>
    <content type="html"><![CDATA[<p>Client side databases with offline support are very important for mobile hybrid apps where performance matters. I've developed several
apps with Cordova/Phonegap in the last months and always needed a database to save information on the client, that has offline
support and allows replicating data back to my cloud database. Two databases came up whenever I was looking for a solution - PouchDB and
Couchbase Lite Phonegap. PouchDB works entirely in the browser whereas Couchbase Lite works with native databases on iOS and Android
through a JavaScript API.</p>

<p>Today I'd like to draw a comparison between them focusing on performance. How fast do they write data and how fast do they
retrieve data? I chose four actions and did ten repetitions each</p>

<ul>
<li>bulk add documents</li>
<li>get all documents</li>
<li>get document by id</li>
<li>query database via view</li>
</ul>


<p>The code is on <a href="https://github.com/zeMirco/pouchdb-vs-couchbase">GitHub</a> so you can run the tests for yourself. My tests were done on my MacBook Pro running Mavericks
 inside the iOS emulator. Therefore the exact values will be different depending on which hardware you use. The overall results and findings should
 still be the same though.</p>

<h3>Bulk add documents</h3>

<p>The first action is adding random documents to each database. The first run was with 10000 and the second with 25000 documents.</p>

<p>The code snippets look like this:</p>

<p>```js
// add array of documents to PouchDB
function pouch_bulkAdd() {
  var max = 10000;
  var data = generate(max);
  console.time('PouchDB - bulk add');
  db.bulkDocs({docs: data}, function(err, res) {</p>

<pre><code>if (err) console.log(err);
console.timeEnd('PouchDB - bulk add');
// save one user for later query
dummyId = res[5000].id;
</code></pre>

<p>  })
}
```</p>

<p>```js
// add array of documents to Couchbase Lite
function couchbase_bulkAdd() {
  var max = 10000;
  var data = generate(max);
  console.time('Couchbase lite - bulk add');
  $.ajax({</p>

<pre><code>type: 'POST',
url: globalUrl + 'performance/_bulk_docs',
data: JSON.stringify({'docs': data}),
contentType : 'application/json'
</code></pre>

<p>  })
  .done(function(res) {</p>

<pre><code>console.timeEnd('Couchbase lite - bulk add');
dummyId = res[5000].id;
</code></pre>

<p>  });
}
```</p>

<table class="table table-condensed full-width">
  <thead>
    <tr>
      <th>#</th>
      <th>PouchDB (10000 docs)</th>
      <th>CB Lite (10000 docs)</th>
      <th> - </th>
      <th>PouchDB (25000 docs)</th>
      <th>CB Lite (25000 docs)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>2214 ms</td>
      <td>2459 ms</td>
      <td> - </td>
      <td>5568 ms</td>
      <td>6064 ms</td>
    </tr>
    <tr>
      <td>2</td>
      <td>2391 ms</td>
      <td>2777 ms</td>
      <td> - </td>
      <td>5561 ms</td>
      <td>6583 ms</td>
    </tr>
    <tr>
      <td>3</td>
      <td>1532 ms</td>
      <td>2966 ms</td>
      <td> - </td>
      <td>5494 ms</td>
      <td>6683 ms</td>
    </tr>
    <tr>
      <td>4</td>
      <td>1506 ms</td>
      <td>3071 ms</td>
      <td> - </td>
      <td>5805 ms</td>
      <td>6723 ms</td>
    </tr>
    <tr>
      <td>5</td>
      <td>1539 ms</td>
      <td>3022 ms</td>
      <td> - </td>
      <td>5705 ms</td>
      <td>6828 ms</td>
    </tr>
    <tr>
      <td>6</td>
      <td>1607 ms</td>
      <td>3087 ms</td>
      <td> - </td>
      <td>5746 ms</td>
      <td>6769 ms</td>
    </tr>
    <tr>
      <td>7</td>
      <td>1596 ms</td>
      <td>3141 ms</td>
      <td> - </td>
      <td>5841 ms</td>
      <td>6805 ms</td>
    </tr>
    <tr>
      <td>8</td>
      <td>1694 ms</td>
      <td>3239 ms</td>
      <td> - </td>
      <td>5676 ms</td>
      <td>6887 ms</td>
    </tr>
    <tr>
      <td>9</td>
      <td>1600 ms</td>
      <td>3245 ms</td>
      <td> - </td>
      <td>5820 ms</td>
      <td>6923 ms</td>
    </tr>
    <tr>
      <td>10</td>
      <td>1579 ms</td>
      <td>3278 ms</td>
      <td> - </td>
      <td>5873 ms</td>
      <td>6886 ms</td>
    </tr>
  </tbody>
  <tfoot>
    <tr>
      <td>Ø</td>
      <td style="background-color: lime;">1725.8 ms</td>
      <td>3028.5 ms</td>
      <td> - </td>
      <td style="background-color: lime;">5708.9 ms</td>
      <td>6715.1 ms</td>
    </tr>
  </tfoot>
</table>


<p><img src="https://s3.amazonaws.com/zeMirco/github/pouchdb-vs-couchbase/bulk-add.png" title="bulk add documents" ></p>

<h3>Get all documents</h3>

<p>The second action was getting all documents from each database, again with 10000 documents and then with 25000 documents.</p>

<p>```js
// get all documents from PouchDB
function pouch_allDocs() {
  console.time('PouchDB - all docs');
  db.allDocs(function(err, res) {</p>

<pre><code>if (err) log(err);
console.timeEnd('PouchDB - all docs');
</code></pre>

<p>  });
}
```</p>

<p>```js
// get all documents from Couchbase Lite
function couchbase_allDocs() {
  console.time('Couchbase lite - all docs');
  $.get(globalUrl + 'performance/_all_docs')
  .done(function(res) {</p>

<pre><code>console.time('Couchbase lite - all docs');
</code></pre>

<p>  });
}
```</p>

<table class="table table-condensed full-width">
  <thead>
    <tr>
      <th>#</th>
      <th>PouchDB (10000 docs)</th>
      <th>CB Lite (10000 docs)</th>
      <th> - </th>
      <th>PouchDB (25000 docs)</th>
      <th>CB Lite (25000 docs)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>345 ms</td>
      <td>126 ms</td>
      <td> - </td>
      <td>852 ms</td>
      <td>364 ms</td>
    </tr>
    <tr>
      <td>2</td>
      <td>325 ms</td>
      <td>29 ms</td>
      <td> - </td>
      <td>796 ms</td>
      <td>41 ms</td>
    </tr>
    <tr>
      <td>3</td>
      <td>315 ms</td>
      <td>16 ms</td>
      <td> - </td>
      <td>800 ms</td>
      <td>40 ms</td>
    </tr>
    <tr>
      <td>4</td>
      <td>315 ms</td>
      <td>16 ms</td>
      <td> - </td>
      <td>782 ms</td>
      <td>39 ms</td>
    </tr>
    <tr>
      <td>5</td>
      <td>311 ms</td>
      <td>16 ms</td>
      <td> - </td>
      <td>806 ms</td>
      <td>39 ms</td>
    </tr>
    <tr>
      <td>6</td>
      <td>314 ms</td>
      <td>17 ms</td>
      <td> - </td>
      <td>791 ms</td>
      <td>39 ms</td>
    </tr>
    <tr>
      <td>7</td>
      <td>315 ms</td>
      <td>22 ms</td>
      <td> - </td>
      <td>791 ms</td>
      <td>40 ms</td>
    </tr>
    <tr>
      <td>8</td>
      <td>308 ms</td>
      <td>18 ms</td>
      <td> - </td>
      <td>787 ms</td>
      <td>39 ms</td>
    </tr>
    <tr>
      <td>9</td>
      <td>315 ms</td>
      <td>16 ms</td>
      <td> - </td>
      <td>821 ms</td>
      <td>37 ms</td>
    </tr>
    <tr>
      <td>10</td>
      <td>313 ms</td>
      <td>16 ms</td>
      <td> - </td>
      <td>801 ms</td>
      <td>40 ms</td>
    </tr>
  </tbody>
  <tfoot>
    <tr>
      <td>Ø</td>
      <td>317.6 ms</td>
      <td style="background-color: lime;">29.2 ms</td>
      <td> - </td>
      <td>802.7 ms</td>
      <td style="background-color: lime;">71.8 ms</td>
    </tr>
  </tfoot>
</table>


<p><img src="https://s3.amazonaws.com/zeMirco/github/pouchdb-vs-couchbase/get-all-docs.png" title="get all documents" ></p>

<h3>Get document by id</h3>

<p>The third action was getting a single document by id. First one document was picked out of the 10000 and for the second run
out of 25000 documents.</p>

<p>```js
// get a certain document by id
function pouch_get() {
  console.time('PouchDB - get single doc');
  db.get(dummyId, function(err, doc) {</p>

<pre><code>if (err) console.log(err);
console.timeEnd('PouchDB - get single doc');
queryUser = doc;
</code></pre>

<p>  });
}
```</p>

<p>```js
// get a certain document by id
function couchbase_get() {
  console.time('Couchbase lite - get single doc');
  $.get(globalUrl + 'performance/' + dummyId)
  .done(function(doc) {</p>

<pre><code>console.timeEnd('Couchbase lite - get single doc');
queryUser = doc;
</code></pre>

<p>  });
}
```</p>

<table class="table table-condensed full-width">
  <thead>
    <tr>
      <th>#</th>
      <th>PouchDB (10000 docs)</th>
      <th>CB Lite (10000 docs)</th>
      <th> - </th>
      <th>PouchDB (25000 docs)</th>
      <th>CB Lite (25000 docs)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>5 ms</td>
      <td>3 ms</td>
      <td> - </td>
      <td>8 ms</td>
      <td>8 ms</td>
    </tr>
    <tr>
      <td>2</td>
      <td>2 ms</td>
      <td>4 ms</td>
      <td> - </td>
      <td>2 ms</td>
      <td>4 ms</td>
    </tr>
    <tr>
      <td>3</td>
      <td>2 ms</td>
      <td>4 ms</td>
      <td> - </td>
      <td>3 ms</td>
      <td>5 ms</td>
    </tr>
    <tr>
      <td>4</td>
      <td>3 ms</td>
      <td>4 ms</td>
      <td> - </td>
      <td>3 ms</td>
      <td>5 ms</td>
    </tr>
    <tr>
      <td>5</td>
      <td>2 ms</td>
      <td>4 ms</td>
      <td> - </td>
      <td>3 ms</td>
      <td>3 ms</td>
    </tr>
    <tr>
      <td>6</td>
      <td>3 ms</td>
      <td>3 ms</td>
      <td> - </td>
      <td>4 ms</td>
      <td>4 ms</td>
    </tr>
    <tr>
      <td>7</td>
      <td>3 ms</td>
      <td>3 ms</td>
      <td> - </td>
      <td>3 ms</td>
      <td>7 ms</td>
    </tr>
    <tr>
      <td>8</td>
      <td>2 ms</td>
      <td>5 ms</td>
      <td> - </td>
      <td>3 ms</td>
      <td>4 ms</td>
    </tr>
    <tr>
      <td>9</td>
      <td>2 ms</td>
      <td>4 ms</td>
      <td> - </td>
      <td>3 ms</td>
      <td>4 ms</td>
    </tr>
    <tr>
      <td>10</td>
      <td>2 ms</td>
      <td>3 ms</td>
      <td> - </td>
      <td>4 ms</td>
      <td>5 ms</td>
    </tr>
  </tbody>
  <tfoot>
    <tr>
      <td>Ø</td>
      <td style="background-color: lime;">2.6 ms</td>
      <td>3.7 ms</td>
      <td> - </td>
      <td style="background-color: lime;">3.6 ms</td>
      <td>4.9 ms</td>
    </tr>
  </tfoot>
</table>


<p><img src="https://s3.amazonaws.com/zeMirco/github/pouchdb-vs-couchbase/get-doc-by-id.png" title="get document by id" ></p>

<h3>Query db with view document and key</h3>

<p>When you run queries against each database you have to remember that Couchbase Lite needs view documents (like CouchDB)
compared to PouchDB that works with on-the-fly map/reduce functions. So whenever we initialize our app we have to save all
required view documents to Couchbase Lite (or check if they are already present). As you can see the mapping function is the
same for both databases.</p>

<p>```js
// couchbase lite view
var view = {
  "id": "_design/users",
  "views": {</p>

<pre><code>"email": {
  "map": "function(doc) { emit(doc.email, null) }"
}
</code></pre>

<p>  }
};</p>

<p>// save view to couchbase lite
$.ajax({
  type: 'PUT',
  url: globalUrl + 'performance/_design/users',
  data: JSON.stringify(view),
  contentType : 'application/json'
})
.done(function(res) {
  log('view created');
});
```</p>

<p>Now you can query each database.</p>

<p>```js
// query pouchdb
function pouch_query() {
  // mapping function
  var map = function(doc) {</p>

<pre><code>emit(doc.email, null);
</code></pre>

<p>  };
  console.time('PouchDB - query single doc');
  // query PouchDB
  db.query({map: map}, {key: queryUser.email}, function(err, res) {</p>

<pre><code>if (err) console.log(err);
console.timeEnd('PouchDB - query single doc');
</code></pre>

<p>  });
}
```</p>

<p>```js
// query the database
function couchbase_query() {
  console.time('Couchbase lite - query single doc');
  $.ajax({</p>

<pre><code>url: globalUrl + 'performance/_design/users/_view/email?key="' + queryUser.email + '"'
</code></pre>

<p>  })
  .done(function(doc) {</p>

<pre><code>console.timeEnd('Couchbase lite - query single doc');
</code></pre>

<p>  });
}
```</p>

<table class="table table-condensed full-width">
  <thead>
    <tr>
      <th>#</th>
      <th>PouchDB (10000 docs)</th>
      <th>CB Lite (10000 docs)</th>
      <th> - </th>
      <th>PouchDB (25000 docs)</th>
      <th>CB Lite (25000 docs)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>370 ms</td>
      <td>1754 ms</td>
      <td> - </td>
      <td>859 ms</td>
      <td>4401 ms</td>
    </tr>
    <tr>
      <td>2</td>
      <td>338 ms</td>
      <td>4 ms</td>
      <td> - </td>
      <td>846 ms</td>
      <td>5 ms</td>
    </tr>
    <tr>
      <td>3</td>
      <td>324 ms</td>
      <td>5 ms</td>
      <td> - </td>
      <td>842 ms</td>
      <td>4 ms</td>
    </tr>
    <tr>
      <td>4</td>
      <td>338 ms</td>
      <td>3 ms</td>
      <td> - </td>
      <td>873 ms</td>
      <td>7 ms</td>
    </tr>
    <tr>
      <td>5</td>
      <td>346 ms</td>
      <td>3 ms</td>
      <td> - </td>
      <td>866 ms</td>
      <td>3 ms</td>
    </tr>
    <tr>
      <td>6</td>
      <td>340 ms</td>
      <td>3 ms</td>
      <td> - </td>
      <td>862 ms</td>
      <td>4 ms</td>
    </tr>
    <tr>
      <td>7</td>
      <td>337 ms</td>
      <td>3 ms</td>
      <td> - </td>
      <td>838 ms</td>
      <td>4 ms</td>
    </tr>
    <tr>
      <td>8</td>
      <td>330 ms</td>
      <td>6 ms</td>
      <td> - </td>
      <td>861 ms</td>
      <td>4 ms</td>
    </tr>
    <tr>
      <td>9</td>
      <td>332 ms</td>
      <td>4 ms</td>
      <td> - </td>
      <td>859 ms</td>
      <td>3 ms</td>
    </tr>
    <tr>
      <td>10</td>
      <td>337 ms</td>
      <td>3 ms</td>
      <td> - </td>
      <td>844 ms</td>
      <td>7 ms</td>
    </tr>
  </tbody>
  <tfoot>
    <tr>
      <td>Ø</td>
      <td>339.2 ms</td>
      <td style="background-color: lime;">178.8 ms</td>
      <td> - </td>
      <td>855 ms</td>
      <td style="background-color: lime;">444.2 ms</td>
    </tr>
  </tfoot>
</table>


<p><img src="https://s3.amazonaws.com/zeMirco/github/pouchdb-vs-couchbase/query-via-view.png" title="query via view document" ></p>

<h3>Conclusion</h3>

<p>Here is a summary of the results. For the part "query doc via view" I'll call it a draw. Couchbase Lite is about 5 times
slower than PouchDB but has the huge advantage of caching for subsequent requests (and therefore wins when averaging the request
times).</p>

<table class="table table-condensed full-width">
  <thead>
    <tr>
      <td></td>
      <td style="text-align: center;">PouchDB</td>
      <td style="text-align: center;">Couchbase Lite Phonegap</td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>bulk add documents</td>
      <td style="text-align: center;">+</td>
      <td></td>
    </tr>
    <tr>
      <td>get all documents</td>
      <td></td>
      <td style="text-align: center;">+</td>
    </tr>
    <tr>
      <td>get document by id</td>
      <td style="text-align: center;">+</td>
      <td></td>
    </tr>
    <tr>
      <td>query doc via view</td>
      <td style="text-align: center;">o</td>
      <td style="text-align: center;">o</td>
    </tr>
  </tbody>
</table>


<p>PouchDB (and CouchDB) are <a href="http://www.couchbase.com/couchbase-vs-couchdb">different</a> from Couchbase Lite (and Couchbase). Jan Lehnardt and
 Scott Hanselman have a great discussion about that topic in the podcast <a href="http://www.hanselminutes.com/386/understanding-couchdb-and-nosql-with-jan-lehnardt">Understanding CouchDB and NoSQL with Jan Lehnardt</a>.
 The most important difference is caching. Couchbase is a combination between CouchDB and Membase and as it is stated on their homepage
  "has a built-in, memcached-based caching technology". The data tells the same story.</p>

<p>Take a look at the last section "Query db with view document and key". On the first request Couchbase Lite needs much more
time than PouchDB to find the document. However on subsequent requests Couchbase Lite is able to find the same document
within a few milliseconds whereas PouchDB constantly needs the same amount of time. That means you should always try to
guess which documents the user is looking for before the user actually wants to get them. That way a requests only takes a few
milliseconds and your app delivers a great user experience. The caching mechanism is also clearly noticeable when getting all
documents from the db. The first requests takes much longer than the following ones. However compared to PouchDB all requests,
even the first one, are much faster.</p>

<p>PouchDB wins the first section where we add a huge amount of random data to the db. Finding a document by ID is also faster in PouchDB
compared to Couchbase Lite. Interesting here is that Couchbase Lite doesn't seem to cache this requests. Subsequent requests aren't
significantly faster than the first one and PouchDB still wins after a couple of repeated requests.</p>

<p>In total it comes down to the caching feature of Couchbase Lite. PouchDB handles writing documents to db, where caching has no influence,
 better whereas Couchbase Lite is much faster, especially after the first requests, when it comes to reading documents from db.
 Therefore it is up to you and your requirements, which database you choose for your next project.</p>

<p>There is also a new kid in town - <a href="http://dev.yathit.com/">http://dev.yathit.com/</a>. I haven't yet tried
this one and cannot say anything about performance and overall usability. It has one major disadvantage compared to PouchDB and
Couchbase Lite and that is replication / syncing. That feature is not built into the db and you have to implement it yourself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sync multiple AngularJS apps without server via PouchDB]]></title>
    <link href="http://mircozeiss.com/sync-multiple-angularjs-apps-without-server-via-pouchdb/"/>
    <updated>2013-07-10T20:34:00+02:00</updated>
    <id>http://mircozeiss.com/sync-multiple-angularjs-apps-without-server-via-pouchdb</id>
    <content type="html"><![CDATA[<p>Nowadays several solutions exist to keep web apps in sync and/or store data offline with JavaScript:</p>

<ul>
<li><a href="http://socket.io/">Socket.io</a></li>
<li><a href="http://www.breezejs.com/">Breeze.js</a></li>
<li><a href="https://towtruck.mozillalabs.com/">TowTruck</a></li>
<li><a href="https://www.firebase.com/">Firebase</a></li>
<li><a href="http://pusher.com/">Pusher</a></li>
<li><a href="https://parse.com/products">Parse</a></li>
<li>and my latest favorite <a href="http://hood.ie/">Hood.ie</a></li>
</ul>


<p>I could go on with that list but you get the idea. Some of the mentioned technologies are more powerful
and have more features out of the box than others. They usually need a server that runs your app and
takes care of all the business logic. In this post I will demonstrate how to build a web app that
syncs data automatically, runs on all modern platforms, stores data persistently and <strong>doesn't need a server</strong>.
The app is powered by <a href="http://angularjs.org/">AngularJS</a> and <a href="http://pouchdb.com/">PouchDB</a>.</p>

<p>The video shows the final app in action. On the left side we have Chrome and Firefox showing our <code>index.html</code> from file and
on the right side you can see Futon, the admin panel for CouchDB.</p>

<iframe width="640" height="480" src="http://www.youtube.com/embed/QSC1fnfUlU0" frameborder="0" allowfullscreen></iframe>


<br>


<br>


<h3>Install CouchDB</h3>

<p>First of all you have to install CouchDB. You could use some third party instance provider like <a href="https://cloudant.com/">Cloudant</a>
 or <a href="http://www.iriscouch.com/">Iris Couch</a>. However our final example won't work with them because we need to have CORS enabled on our CouchDB.
 CORS was introduced with v1.3. Cloudant instances are running on v1.0.2 whereas Iris Couch actually provides
  v1.3. Sadly you cannot enable CORS by hand. That's why we will work with our own instance.</p>

<p>Go to <a href="http://couchdb.apache.org/">couchdb.apache.org</a> and click on the big fat download button. Download
the package for your operating system, select a mirror, wait and then open CouchDB. On my MacBook I get
a little CouchDB icon on my Menu Bar. Click on it and select <strong>Open admin console</strong>. Or just open your browser and navigate to
<a href="http://127.0.0.1:5984/_utils/">127.0.0.1:5984/_utils</a>. You are now inside Futon, which is the admin tool for CouchDB.</p>

<p>First of all we have to <a href="http://docs.couchdb.org/en/latest/cors.html">enable CORS</a>. Go to section <em>httpd</em> and
set <strong>enable_cors</strong> to true. Navigate to the bottom of the page and click on <strong>Add a new section</strong>. Enter the following into
the form that pops up</p>

<ul>
<li>section: cors</li>
<li>option: origins</li>
<li>value: *</li>
</ul>


<p>Now let's create our database. Click on <strong>Create database ...</strong> and enter <code>ng-db</code>. The name is important and we have
to use the exact name later on for the client code. That's it! Our CouchDB instance is running, CORS is enabled
and we have a database to work with. Next install PouchDB.</p>

<h3>Download PouchDB</h3>

<p>To add PouchDB to your app you simply have to <a href="http://download.pouchdb.com/pouchdb-nightly.min.js">download</a> the JS file. As always I recommend working with the
non-minified version during development and switch to the min version for deployment. Include the .js file inside
your index.html.</p>

<p>```html</p>

<script src="pouchdb.js"></script>


<p>```</p>

<p>Done. We can now start using PouchDB in our app.</p>

<h3>Create AngularJS app</h3>

<p>Activate AngularJS as shown in the <a href="http://angularjs.org/">docs</a>.</p>

<p><code>js
var myApp = angular.module('myApp', []);
</code></p>

<h4>PouchDB service</h4>

<p>The first service we create simply makes the PouchDB instance available inside the AngularJS world.
It also turns on continuous replication so changes are automatically synced between database and client
no matter where they occur.</p>

<p>```js
myApp.factory('myPouch', [function() {</p>

<p>  var mydb = new Pouch('ng-pouch');
  Pouch.replicate('ng-pouch', 'http://127.0.0.1:5984/ng-db', {continuous: true});
  Pouch.replicate('http://127.0.0.1:5984/ng-db', 'ng-pouch', {continuous: true});
  return mydb;</p>

<p>}]);
```</p>

<h4>PouchDB promises wrapper</h4>

<p>Our second service is a simple wrapper around PouchDB's native API to save and remove documents. The
service provides two helper functions <code>return()</code> and <code>remove(id)</code> that both return promises. That keeps
the async code nice and tidy.</p>

<p>```js
myApp.factory('pouchWrapper', ['$q', '$rootScope', 'myPouch', function($q, $rootScope, myPouch) {</p>

<p>  return {</p>

<pre><code>add: function(text) {
  var deferred = $q.defer();
  var doc = {
    type: 'todo',
    text: text
  };
  myPouch.post(doc, function(err, res) {
    $rootScope.$apply(function() {
      if (err) {
        deferred.reject(err)
      } else {
        deferred.resolve(res)
      }
    });
  });
  return deferred.promise;
},
remove: function(id) {
  var deferred = $q.defer();
  myPouch.get(id, function(err, doc) {
    $rootScope.$apply(function() {
      if (err) {
        deferred.reject(err);
      } else {
        myPouch.remove(doc, function(err, res) {
          $rootScope.$apply(function() {
            if (err) {
              deferred.reject(err)
            } else {
              deferred.resolve(res)
            }
          });
        });
      }
    });
  });
  return deferred.promise;
}
</code></pre>

<p>  }</p>

<p>}]);
```</p>

<h4>PouchDB event listener</h4>

<p>Our last service is a listener that emits events whenever PouchDB fires the <code>onChange</code> event. It either
emits <code>newTodo</code> when a new document is added to the database or <code>delTodo</code> when a document is deleted. The change
object coming from PouchDB looks like the following</p>

<p><code>
{
  "id": "6F48205D-E97B-4621-ACAD-4CD3DFAC074E",
  "seq": 1,
  "changes": [{"rev":"2-96ea3cf93a75c6510c08c95e42686aa1"}],
  "deleted": true
}
</code></p>

<p>From the key <code>deleted</code> we get a Boolean value that tells us if the change was a deletion or an addition
to our database. If the value is <code>true</code> we know that an object was deleted from our database and we therefore
emit a <code>delTodo</code> event with the document id. If the value is <code>false</code> we unfortunately don't get the new
object directly from the <code>onChange</code> handler. We only get the document id and have to manually get it
via GET request. At the end we fire a <code>newTodo</code> event with the new document as data.</p>

<p>```js
myApp.factory('listener', ['$rootScope', 'myPouch', function($rootScope, myPouch) {</p>

<p>  myPouch.changes({</p>

<pre><code>continuous: true,
onChange: function(change) {
  if (!change.deleted) {
    $rootScope.$apply(function() {
      myPouch.get(change.id, function(err, doc) {
        $rootScope.$apply(function() {
          if (err) console.log(err);
          $rootScope.$broadcast('newTodo', doc);
        })
      });
    })
  } else {
    $rootScope.$apply(function() {
      $rootScope.$broadcast('delTodo', change.id);
    });
  }
}
</code></pre>

<p>  })
}]);
```</p>

<h4>Main controller</h4>

<p>Our controller combines the three services and creates a link to our view. First of all we create
an empty array that will hold our todo objects. The <code>submit()</code> function
is executed whenever the <strong>Add</strong> button is clicked. A click on the small cross calls the <code>remove(id)</code>
function.</p>

<p>At the end of our controller we have the listener for our two custom events <code>newTodo</code> and <code>delTodo</code>.
It adds or removes items from the <code>todos</code> array.</p>

<p>```js
myApp.controller('TodoCtrl', ['$scope', 'listener', 'pouchWrapper', function($scope, listener, pouchWrapper) {</p>

<p>  $scope.submit = function() {</p>

<pre><code>pouchWrapper.add($scope.text).then(function(res) {
  $scope.text = '';
}, function(reason) {
  console.log(reason);
})
</code></pre>

<p>  };</p>

<p>  $scope.remove = function(id) {</p>

<pre><code>pouchWrapper.remove(id).then(function(res) {
</code></pre>

<p>//      console.log(res);</p>

<pre><code>}, function(reason) {
  console.log(reason);
})
</code></pre>

<p>  };</p>

<p>  $scope.todos = [];</p>

<p>  $scope.$on('newTodo', function(event, todo) {</p>

<pre><code>$scope.todos.push(todo);
</code></pre>

<p>  });</p>

<p>  $scope.$on('delTodo', function(event, id) {</p>

<pre><code>for (var i = 0; i&lt;$scope.todos.length; i++) {
  if ($scope.todos[i]._id === id) {
    $scope.todos.splice(i,1);
  }
}
</code></pre>

<p>  });</p>

<p>}]);
```</p>

<p>One thing I haven't figured out yet is an error message similar to:</p>

<p><code>html
GET http://127.0.0.1:5984/ng-db/_local%2F4e458454e3c7031672110dc4a02c72f4 404 (Object Not Found)
</code></p>

<p>The rest works absolutely fine and although I get this error message I can't see any problems during sync.</p>

<h3>Conclusion</h3>

<p>We used AngularJS and PouchDB to build a small app that syncs serverless and stores data persistently.
 Changes are distributed automatically. They can be made inside the database, on any client or on any third
 party device that pushes changes to the connected CouchDB. AngularJS events update our models in the controller that pushes
 changes to our views via two-way data binding. It is possible to add todos to the app when offline and
 as soon you are back online all data is synced to the connected devices. For more information about
 the topic visit <a href="http://nobackend.org/">nobackend.org</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building offline applications with AngularJS and PouchDB]]></title>
    <link href="http://mircozeiss.com/building-offline-applications-with-angularjs-and-pouchdb/"/>
    <updated>2013-06-17T19:20:00+02:00</updated>
    <id>http://mircozeiss.com/building-offline-applications-with-angularjs-and-pouchdb</id>
    <content type="html"><![CDATA[<p>You may have read my other post about <a href="http://mircozeiss.com/async-couchdb-queries-with-nano-and-promises/">Async CouchDB queries with nano and promises</a>. In that post I built a small app to track how many goals a player
scored per match. Every action was stored as a single document in CouchDB. JavaScript promises were
used to access the data which allowed functions be easily reused.</p>

<p>In this article I will build the same application without any backend. I use <a href="http://pouchdb.com/">PouchDB</a> as my database
and <a href="http://angularjs.org/">AngularJS</a> as the frontend framework.</p>

<h3>PouchDB</h3>

<p>I'd like to talk a little more about PouchDB since you can find a lot of intro articles for AngularJS
but not as many for PouchDB.</p>

<blockquote><p>PouchDB is a JavaScript library that allows you to store and query data for web applications that need to work offline, and sync with an online database when you are online.</p></blockquote>

<p>PouchDB provides the same API as CouchDB but works in the browser. If you already know CouchDB you
also know how to work with PouchDB. The library is under active development and currently available as an alpha version.
Although it is an alpha version it is very stable and so far I didn't have any problems with the code.</p>

<p>The <a href="http://pouchdb.com/api.html">documentation</a> is a good starting point. Some handy features that were added recently and are not yet in the
documentation are</p>

<ul>
<li>built in map reduce functions</li>
<li>and query functions.</li>
</ul>


<h4>Built in map reduce functions</h4>

<p>You might know the built in map reduce functions from CouchDB. They are <code>_count</code>, <code>_sum</code> and <code>_stats</code>. All are written in Erlang
and allow fast access to your data. PouchDB also has those built in functions. Therefore you don't have to write your own and pass them as
a parameter into the query function. A simple query looks like the following.</p>

<p>```js
var map = function(doc) {
  if (doc.type === 'goal') {</p>

<pre><code>emit(doc.playerId, null)
</code></pre>

<p>  }
};</p>

<p>pouchdb.query({map: map, reduce: '_count'}, {key: '1'}, function(err, res) {
  if (err) console.log(err);
  console.log(res);
});
```</p>

<p>The code above loops through all documents in our db. Whenever the mapping function finds one that has the type <code>goal</code> it emits it sorted by
<code>playerId</code>. The query function afterwards simply counts all documents with the playerID <code>'1'</code> and returns the sum.</p>

<p>Here is the code for the all the built in functions so you know what they do.</p>

<p><code>_count</code> <a href="https://github.com/daleharvey/pouchdb/blob/master/src/plugins/pouchdb.mapreduce.js#L37">(source)</a> counts all documents.</p>

<p>```js
function(keys, values, rereduce){
  if (rereduce){</p>

<pre><code>return sum(values);
</code></pre>

<p>  } else {</p>

<pre><code>return values.length;
</code></pre>

<p>  }
}
```</p>

<p><code>_sum</code> <a href="https://github.com/daleharvey/pouchdb/blob/master/src/plugins/pouchdb.mapreduce.js#L33">(source)</a> returns the sum of all document values.
It would return the same value as <code>_count</code> when every document is emitted with values equals <code>1</code>.</p>

<p><code>js
function(keys, values){
  return sum(values);
}
</code></p>

<p><code>_stats</code> <a href="https://github.com/daleharvey/pouchdb/blob/master/src/plugins/pouchdb.mapreduce.js#L45">(source)</a> provides some basic statistical
analysis for our data.</p>

<p>```js
function(keys, values, rereduce){
  return {</p>

<pre><code>'sum': sum(values),
'min': Math.min.apply(null, values),
'max': Math.max.apply(null, values),
'count': values.length,
'sumsqr': (function(){
  var _sumsqr = 0;
  for(var idx in values){
    _sumsqr += values[idx] * values[idx];
  }
  return _sumsqr;
})()
</code></pre>

<p>  };
  }
```</p>

<h4>Query functions</h4>

<p>Query functions are needed to <a href="http://pouchdb.com/api.html#fetch_a_document">fetch a document</a> when you don't know the document's ID. I couldn't find anything about query
functions with individual keys in the documentation. So I looked at the tests and found the <a href="https://github.com/daleharvey/pouchdb/blob/decb29d057065f01a6121e129b24cd02240ef1b2/tests/test.views.js#L109-L124">test</a>
for opts.key.</p>

<p>```js
db.query(queryFun, {reduce: false, key: 'key2'}, function(<em>, res) {
  equal(res.rows.length, 1, 'Doc with key');
  db.query(queryFun, {reduce: false, key: 'key3'}, function(</em>, res) {</p>

<pre><code>equal(res.rows.length, 2, 'Multiple docs with key');
start();
</code></pre>

<p>  });
});
```</p>

<p>It shows that we can simply use the <code>key</code> property to look for specific results in our db. The same goes for <code>startkey</code> and <code>endkey</code>
 properties. Their documentation is in section <a href="http://pouchdb.com/api.html#fetch_documents">fetch documents</a> describing the <code>allDocs()</code> method.</p>

<h3>Marry PouchDB and AngularJS</h3>

<p>Since both frameworks are implemented independently, they don't know how to work with each other. We
have to bring PouchDB into the AngularJS world in order to have access from the controller. The best
way to do this is using a <code>service</code>.</p>

<p><code>js
services.factory('pouchdb', function() {
  Pouch.enableAllDbs = true;
  return new Pouch('myPouch');
});
</code></p>

<p>Inject this service whenever you want to use PouchDB from your controller.</p>

<p><code>js
myApp.controller('AppCtrl', ['$scope', 'pouchdb', function($scope, pouchdb) {
  // more code here
}]);
</code></p>

<h3>Wrapping PouchDB into promises</h3>

<p>The PouchDB API will probably support promises at some point <a href="https://github.com/daleharvey/pouchdb/issues/608">in the future</a>. At the moment it does not.
If you've read my post about <a href="http://mircozeiss.com/async-couchdb-queries-with-nano-and-promises/">async CouchDB queries with nano and promises</a>, you know
promises come in really handy. As AngularJS offers promises through the <code>$q</code> module we can build some wrapper functions to interact with our data.</p>

<p>The wrapper is an AngularJS <strong>factory</strong> and consists of two functions. The first one <code>add(playerId)</code> adds a goal document to the db.</p>

<p>```js
add: function(playerId) {
  var deferred = $q.defer();
  var doc = {</p>

<pre><code>type: 'goal',
playerId: playerId
</code></pre>

<p>  };
  pouchdb.post(doc, function(err, res) {</p>

<pre><code>$rootScope.$apply(function() {
  if (err) {
    deferred.reject(err)
  } else {
    deferred.resolve(res)
  }
});
</code></pre>

<p>  });
  return deferred.promise;
}
```</p>

<p>We need the <code>$rootScope.$apply()</code> function because AngularJS doesn't know what's happening inside the <code>pouchdb.post()</code> callback.
It loses the scope and would neither <code>reject</code> nor <code>resolve</code> the promise. Read more about this topic at <a href="http://jimhoskins.com/2012/12/17/angularjs-and-apply.html">AngularJS and scope.$apply</a>
by Jim Hoskins.</p>

<p>The second function <code>getScore(playerId)</code> counts all documents per player and returns the total amount. If no documents are found
for a certain <code>playerId</code> it returns 0.</p>

<p>```js
getScore: function(playerId) {
  var deferred = $q.defer();
  var map = function(doc) {</p>

<pre><code>if (doc.type === 'goal') {
  emit(doc.playerId, null)
}
</code></pre>

<p>  };
  pouchdb.query({map: map, reduce: '_count'}, {key: playerId}, function(err, res) {</p>

<pre><code>$rootScope.$apply(function() {
  if (err) {
    deferred.reject(err);
  } else {
    if (!res.rows.length) {
      deferred.resolve(0);
    } else {
      deferred.resolve(res.rows[0].value);
    }
  }
});
</code></pre>

<p>  });
  return deferred.promise;
}
```</p>

<p>We can now inject this helper service into our controller and start using it. First of all get the score for each player
on page load.</p>

<p>```js
$q.all([
  pp.getScore('1'),
  pp.getScore('2'),
  pp.getScore('3')
]).then(function(res) {</p>

<pre><code>$scope.score['1'] = res[0];
$scope.score['2'] = res[1];
$scope.score['3'] = res[2]
</code></pre>

<p>  });
```</p>

<p>A click on a button invokes the <code>incScore()</code> function that calls our <code>add()</code> from the helper service. It creates a new
document, saves it to db and calculates the new score.</p>

<p>```js
$scope.incScore = function(id) {
  pp.add(id)</p>

<pre><code>.then(function(res) {
  return pp.getScore(id);
})
.then(function(score) {
  $scope.score[id] = score;
})
</code></pre>

<p>}
```</p>

<p>A working example with all code can be found at <a href="http://plnkr.co/edit/BoxJTY?p=preview">plnkr#BoxJTY</a>. Play with the scores of each player and afterwards
close your browser. Then open your browser again and navigate to the example page. Et voilà, the individual scores stay the same. The
values were stored in the browser's db, completely offline. Be careful when you empty the cache. All
values will be lost. You will also notice that when you visit the example with a different browser the
individual scores are not the same. That's because each browser (even each browser version) uses its own
private database that is not shared with other browsers or browser versions. If you want to transfer the score
to other browsers or mobile devices you have to implement a backend solution.</p>

<h3>Testing</h3>

<p>Not long ago I tweeted the following</p>

<blockquote class="twitter-tweet"><p>when writing your next uber <a href="https://twitter.com/search/%23angularjs">#angularjs</a> blog post provide appropriate tests</p>&mdash; Mirco Zeiss (@zeMirco) <a href="https://twitter.com/zeMirco/status/344182488098291713">June 10, 2013</a></blockquote>


<script async src="http://mircozeiss.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>The AngularJS folks are quite passionate about testing and so am I. It can be annoying sometimes and of course
takes more time but it is well worth it and will one day save your a**. In addition it will improve
the quality of your code and therefore the quality of your blog post.</p>

<p>So let's write some tests for our new services. Before we start we have to think about which
things can actually be tested.</p>

<ol>
<li><code>Pouch.enableAllDbs</code> should be set to <code>true</code></li>
<li>The returned object should be an instance of Pouch</li>
<li>The name of our db should be <strong>myPouch</strong></li>
<li>The service should be able to save an object to db</li>
<li>The service should be able to retrieve an object from db</li>
</ol>


<p>When all the above tests pass we can be pretty sure that we've done a good job.</p>

<h4>1. Check if enableAllDbs is set to true</h4>

<p>Setting <code>enableAllDbs</code> to <code>true</code> isn't necessary for this small example app. However if you'd like
to obtain a list of all databases one day this feature must have been set to <code>true</code> in advance.</p>

<p>The test looks like this.</p>

<p><code>js
it('should set "enableAllDbs" to true', inject(function(pouchdb) {
  expect(Pouch.enableAllDbs).toBeTruthy();
}));
</code></p>

<p>That was easy. Just three lines of code. Cool, testing is fun!</p>

<h4>2. Verify the constructor of the object returned from the service</h4>

<p>This is also a very simple test.</p>

<p><code>js
it('should return a Pouch instance', inject(function(pouchdb) {
  expect(pouchdb instanceof Pouch).toBeTruthy();
}));
</code></p>

<p>Really that's it? Yep quite nice, right?</p>

<h4>3. Verify the name of our db</h4>

<p>I'm sorry but I have to disappoint you. Testing is not always as easy as in the first two examples. The following is an asynchronous test and that's not as
simple with AngularJS and Jasmine.</p>

<p>```js
it('should create a db with name "myPouch"', inject(function(pouchdb) {
  var result;</p>

<p>  pouchdb.info(function(err, res) {</p>

<pre><code>result = res;
</code></pre>

<p>  });</p>

<p>  waitsFor(function() {</p>

<pre><code>return result;
</code></pre>

<p>  });</p>

<p>  runs(function() {</p>

<pre><code>expect(result.db_name).toEqual('_pouch_myPouch');
</code></pre>

<p>  });</p>

<p>}));
```</p>

<p>First we have to call the <code>info()</code> method which gives us some information
about our db in the callback. Within that callback we save the info to our global variable <code>result</code>. The
<code>waitsFor()</code> and <code>runs()</code> functions are needed by Jasmine to wait for the result from our info callback and
then continue with the test.</p>

<h4>4. Test if service can save objects to db</h4>

<p>For this test we simply use our new service, save an object to the database and check for the correct callback.</p>

<p>```js
it('should allow saving new objects via a promise', inject(function(pp) {
  var result;</p>

<p>  pp.add('1').then(function(res) {</p>

<pre><code>result = res;
</code></pre>

<p>  });</p>

<p>  waitsFor(function() {</p>

<pre><code>return result;
</code></pre>

<p>  });</p>

<p>  runs(function() {</p>

<pre><code>expect(result.ok).toBeTruthy();
</code></pre>

<p>  });</p>

<p>}));
```</p>

<h4>5. Test if service can retrieve objects from db</h4>

<p>For our last test we try to retrieve the before saved object and check whether we got the right score.</p>

<p>```js
it('should allow retrieving new objects via a promise', inject(function(pp) {
  var result;</p>

<p>  pp.getScore('1').then(function(res) {</p>

<pre><code>result = res;
</code></pre>

<p>  });</p>

<p>  waitsFor(function() {</p>

<pre><code>return result;
</code></pre>

<p>  });</p>

<p>  runs(function() {</p>

<pre><code>expect(result).toBe(1);
</code></pre>

<p>  });</p>

<p>}));
```</p>

<p>That's it! We can now safely assume that our service is working correctly and does what we expect.</p>

<h3>Conclusion</h3>

<p>AngularJS and PouchDB are awesome frameworks. I hope their engineers
and the community will support both for a long time to come. Combined they are a match made in heaven. AngularJS gives you all the
tools to keep your frontend code nice and tidy while PouchDB takes care of your data. Use both to write
offline applications that run in the browser on every modern device. See the final app at <a href="http://plnkr.co/edit/BoxJTY?p=preview">plnkr#BoxJTY</a>.</p>
]]></content>
  </entry>
  
</feed>
