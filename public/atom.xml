<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mirco Zeiss]]></title>
  <link href="http://mircozeiss.com/atom.xml" rel="self"/>
  <link href="http://mircozeiss.com/"/>
  <updated>2013-05-22T21:49:29+02:00</updated>
  <id>http://mircozeiss.com/</id>
  <author>
    <name><![CDATA[Mirco Zeiss]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using CSRF protection with Express and Angular]]></title>
    <link href="http://mircozeiss.com/using-csrf-with-express-and-angular/"/>
    <updated>2013-05-19T19:20:00+02:00</updated>
    <id>http://mircozeiss.com/using-csrf-with-express-and-angular</id>
    <content type="html"><![CDATA[<p>In this post I&#8217;ll demonstrate how to use CSRF protection for Express and Angular apps. Both frameworks have CSRF protection
built in but don&#8217;t understand each other without manual adjustments.</p>

<p>Express is built on top of the <a href="http://www.senchalabs.org/connect/">connect</a> framework which has a native <a href="http://www.senchalabs.org/connect/csrf.html">csrf</a> middleware. It generates a random string token
that is unique for each user. The token is saved in the user&#8217;s session on the server. On every request which mutates state,
usually <code>PUT</code>, <code>POST</code> and <code>DELETE</code> requests, the middleware validates whether the CSRF token sent from the client is the
same as the token stored in the user&#8217;s session on the server. If it isn&#8217;t the client gets the answer <code>403 Forbidden</code>. The following is taken from the docs and describes where the middleware is looking for the token.</p>

<blockquote><p>The default value function checks req.body generated by the bodyParser() middleware, req.query generated by query(), and the &#8220;X-CSRF-Token&#8221; header field.</p></blockquote>

<p>Angular also has CSRF features built into its $http service.</p>

<blockquote><p>When performing XHR requests, the $http service reads a token from a cookie called XSRF-TOKEN and sets it as the HTTP header X-XSRF-TOKEN</p></blockquote>

<p>Both frameworks offer CSRF protection. To make them work together we have to make some adjustments. Follow the steps below to make CSRF work for your next app</p>

<ol>
<li>Add CSRF middleware to your Express app</li>
<li>Tell the middleware to use the right token</li>
<li>Use custom middleware to set a cookie for Angular</li>
<li>Use Angular $http library for XHR requests</li>
</ol>


<h3>1. Adding CSRF middleware to an Express app</h3>

<p>In the first step we have to add the CSRF middleware to our app. As it requires sessions we also have to
add some extra session middleware. You don&#8217;t have to install anything because they come with Express.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">cookieParser</span><span class="p">(</span><span class="s1">&#39;your secret here&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">cookieSession</span><span class="p">());</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">csrf</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. Telling CSRF middleware to use the right token</h3>

<p>As mentioned earlier the default CSRF middleware looks in <code>req.body</code>, <code>req.query</code> and the <code>X-CSRF-Token</code> header for the token.
Angular uses none of the methods but instead its own header <code>X-XSRF-TOKEN</code>. Therefor we have to tell Express where to look
for the token delivered by Angular. Create a new function that returns this token from the <code>request</code> object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">csrfValue</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">token</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span> <span class="o">&amp;&amp;</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">_csrf</span><span class="p">)</span>
</span><span class='line'>    <span class="o">||</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">query</span> <span class="o">&amp;&amp;</span> <span class="nx">req</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">_csrf</span><span class="p">)</span>
</span><span class='line'>    <span class="o">||</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">headers</span><span class="p">[</span><span class="s1">&#39;x-csrf-token&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="o">||</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">headers</span><span class="p">[</span><span class="s1">&#39;x-xsrf-token&#39;</span><span class="p">]);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">token</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function above is the default function taken from connect. I just added the last line <code>req.headers['x-xsrf-token']</code>.
It still accepts the other methods but also finds the incoming token from Angular. Now pass this function to the CSRF middleware from step 1.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">csrf</span><span class="p">({</span><span class="nx">value</span><span class="o">:</span> <span class="nx">csrfValue</span><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool, Express can now find the token sent by Angular. One thing that is missing is sending the token from our Express server
to our Angular client.</p>

<h3>3. Using custom middleware to set a cookie for Angular</h3>

<p>Angular&#8217;s $http library reads the token from the <code>XSRF-TOKEN</code> cookie. We therefore have to set this cookie and send it to
the client. Setting a cookie in Express is done via the <code>res.cookie('name', 'value')</code> function. The name is obviously <code>XSRF-TOKEN</code>.
The value is read from the user&#8217;s session. The key <code>req.session._csrf</code> is automatically generated by the csrf middleware.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">cookie</span><span class="p">(</span><span class="s1">&#39;XSRF-TOKEN&#39;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">_csrf</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. Using Angular $http library for XHR requests</h3>

<p>We now have everything in place to use Angular&#8217;s $http library without further adjustments. A simple
controller could look like the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">myApp</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">,[]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;csrfCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="s1">&#39;$http&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">submit</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">value</span><span class="o">:</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">value</span><span class="p">})</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$scope</span><span class="p">.</span><span class="nx">answer</span> <span class="o">=</span> <span class="nx">data</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;err&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>No adjustments are need on the client and your code should work as is.</p>

<p><img src="https://s3.amazonaws.com/mircozeiss.com/csrf-express-angular.png" title="CSRF example for Express and Angular" ></p>

<h3>Conclusion</h3>

<p>As you&#8217;ve seen adding CSRF protection to an app built with Express and Angular is really simple. There shouldn&#8217;t be
any reason not to use this technique for your next app. It adds another layer of security. The underlying principles can also
be applied to apps built with a different stack. Reading their documentations is always a good start.</p>

<p>You can find the code at GitHub <a href="https://github.com/zeMirco/csrf-express-angular">zeMirco/csrf-express-angular</a> and a running example at Heroku <a href="http://arcane-headland-6078.herokuapp.com/">http://arcane-headland-6078.herokuapp.com/</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Not using email as the primary key with Mozilla Persona]]></title>
    <link href="http://mircozeiss.com/not-using-email-as-the-primary-key-with-mozilla-persona/"/>
    <updated>2013-05-13T20:53:00+02:00</updated>
    <id>http://mircozeiss.com/not-using-email-as-the-primary-key-with-mozilla-persona</id>
    <content type="html"><![CDATA[<p>Based on the feedback for my last post <a href="http://mircozeiss.com/mozilla-persona-example-app-with-express-and-couchdb/">Mozilla Persona example app with Express and CouchDB</a>
I made some small but quite important changes in the architecture of my app.</p>

<p><a href="http://fmarier.org/">Francois Marier</a> suggested that we shouldn&#8217;t use our users&#8217; email addresses as the primary key
in our db. That&#8217;s also what Mozilla&#8217;s <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Persona/The_implementor_s_guide/Enabling_users_to_change_their_email_address?redirectlocale=en-US&amp;redirectslug=Persona%2FThe_implementor_s_guide%2FEnabling_users_to_change_their_email_address">implementer&#8217;s guide</a> is telling. So
I took the code from my last post and refactored everything. Each user is now identified by a unique key and not anymore by his email address.
You can find the current version of the example app at GitHub <a href="https://github.com/zeMirco/mozilla-persona-express-couchdb">mozilla-persona-express-couchdb</a>.</p>

<h3>Using views to find users</h3>

<p>In the first version of my app I used the email as the primary key. Getting a user from db was as simple as a <code>GET</code> request
with the appropriate email address. Now that I don&#8217;t have the email as the primary key anymore and every user is stored under
a random string, we have to use a simple <strong>CouchDB view</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;views&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;byEmail&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;map&quot;</span><span class="o">:</span> <span class="s2">&quot;function(doc){</span>
</span><span class='line'><span class="s2">      if (doc.type === &#39;user&#39;) {</span>
</span><span class='line'><span class="s2">        emit(doc.email, doc)</span>
</span><span class='line'><span class="s2">      }</span>
</span><span class='line'><span class="s2">    }&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Every user document looks like the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="s2">&quot;_id&quot;</span><span class="o">:</span> <span class="s2">&quot;3115b40189b7dfa4d007ff7fc8536af4&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;_rev&quot;</span><span class="o">:</span> <span class="s2">&quot;2-359ee1c1e888690c9c6468b55fa48fa7&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;email&quot;</span><span class="o">:</span> <span class="s2">&quot;mirco.zeiss@gmail.com&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;username&quot;</span><span class="o">:</span> <span class="s2">&quot;zeMirco&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Combined with the <strong>view</strong> from above gives us the following table, which we can query with the <code>email</code> as <code>key</code>.</p>

<table class="table table-striped table-hover table-condensed table-bordered">
  <thead>
    <tr>
      <th>Key</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>“test@mockmyid.com”</td>
      <td>{&#8230;}</td>
    </tr>
    <tr>
      <td>“mirco.zeiss@gmail.com”</td>
      <td>{&#8230;}</td>
    </tr>
  </tbody>
</table>


<h3>Querying the view</h3>

<p>In the first version of the app I used a simple <code>GET</code> request to retrieve the user object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">email</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>I changed those lines as we have to query the view now.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">view</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="s1">&#39;byEmail&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">key</span><span class="o">:</span> <span class="nx">email</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately that means we can&#8217;t use the <a href="http://eclipsesource.com/blogs/2013/03/01/use-your-head-checking-couchdb-document-existence/"><code>HEAD</code> request</a> to check for document existence.
This is now done by checking the amout of <code>rows</code> we get back as an answer.</p>

<h3>Let the user change his email address</h3>

<p>With the new architecture in place users are able to change their email addresses as described in Mozilla&#8217;s <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Persona/The_implementor_s_guide/Enabling_users_to_change_their_email_address?redirectlocale=en-US&amp;redirectslug=Persona%2FThe_implementor_s_guide%2FEnabling_users_to_change_their_email_address">Implementer&#8217;s Guide</a>.
I haven&#8217;t yet implemented this feature but will do so in the near future and write about my experiences. So stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mozilla Persona example app with Express and CouchDB]]></title>
    <link href="http://mircozeiss.com/mozilla-persona-example-app-with-express-and-couchdb/"/>
    <updated>2013-05-03T20:25:00+02:00</updated>
    <id>http://mircozeiss.com/mozilla-persona-example-app-with-express-and-couchdb</id>
    <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/en-US/docs/Persona">Mozilla Persona</a> gained a lot of attention recently.
The developers have released <a href="http://identity.mozilla.com/post/47541633049/persona-beta-2">Beta 2</a> at the
beginning of last month and aim to bring Persona to <a href="https://blog.mozilla.org/beyond-the-code/2013/04/09/persona-beta2/">half of the worldwide Internet population</a> in the near future.</p>

<p>Although Mozilla has a <a href="https://developer.mozilla.org/en-US/docs/Persona/Quick_Setup">quick setup guide</a> to demonstrate the basic implementation
it is not as trivial to create a fully featured web app with <a href="http://www.adambarth.com/papers/2008/barth-jackson-mitchell-b.pdf">CSRF protection</a>,
<a href="https://developer.mozilla.org/en-US/docs/Security/CSP">Content Security Policy</a> and database in the backend. That&#8217;s why I wrote
this simple example application to learn more about the system and help others to get started.</p>

<p>The app is built on the following open source stack</p>

<ul>
<li><a href="http://couchdb.apache.org/">CouchDB</a> hosted at <a href="https://cloudant.com/">Cloudant</a></li>
<li><a href="https://github.com/dscape/nano">nano</a></li>
<li><a href="http://expressjs.com/">Express</a></li>
<li><a href="https://github.com/mikeal/request">Request</a></li>
<li><a href="http://jquery.com/">jQuery</a></li>
<li><a href="http://twitter.github.io/bootstrap/">Bootstrap</a></li>
</ul>


<p>To see the demo visit <a href="http://mysterious-coast-9759.herokuapp.com/">mysterious-coast-9759.herokuapp.com</a>. The code is available at
GitHub <a href="https://github.com/zeMirco/mozilla-persona-express-couchdb/">mozilla-persona-express-couchdb</a>.</p>

<p><img src="https://s3.amazonaws.com/mircozeiss.com/mozilla-persona-example.png" title="Mozilla Persona example app with Express and CouchDB" ></p>

<h3>Related projects</h3>

<p>Several other examples already exist. Take a look at</p>

<ul>
<li><a href="https://github.com/mozilla/123done">123done</a></li>
<li><a href="https://github.com/lloyd/node.js-persona-example">node.js-persona-example</a></li>
<li><a href="https://github.com/lloyd/myfavoritebeer.org">myfavoritebeer.org</a></li>
<li><a href="https://github.com/mozilla/browserid-cookbook/tree/master/node-express">browserid-cookbook</a></li>
</ul>


<p>They were the foundation and inspiration for my own project. Without them I couldn&#8217;t have done it. Therefore, thanks to the authors!
Especially to <a href="http://lloyd.io/">Lloyd Hilaiel</a>, <a href="http://fmarier.org/">Francois Marier</a> and <a href="https://shanetomlinson.com/">Shane Tomlinson</a>.</p>

<p>However, all of the examples were missing some features I&#8217;d like to see. These are</p>

<ul>
<li>proper DB implementation</li>
<li>CSRF protection</li>
<li>Content Security Policy (CSP)</li>
<li>cookie for <code>loggedInUser</code> variable</li>
<li>use of request module (imho makes code easier to read)</li>
<li>simplicity</li>
</ul>


<p>So I tried to take the best parts from the above examples and throw them together in my own app.</p>

<h3>Getting started</h3>

<p>I won&#8217;t cover the basic implementation. Read more about those steps in <a href="https://developer.mozilla.org/en-US/docs/Persona/Quick_Setup">quick setup</a>.
I&#8217;d like to focus more on the advanced stuff.</p>

<p>Let&#8217;s start by implementing our database. We want to save our users identified by their email address and an additional property, which is the username.
As we are using CouchDB a sample document looks like the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="s2">&quot;_id&quot;</span><span class="o">:</span> <span class="s2">&quot;mirco.zeiss@gmail.com&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;_rev&quot;</span><span class="o">:</span> <span class="s2">&quot;31-a51c569f771348de72f06a0886b51ab0&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;username&quot;</span><span class="o">:</span> <span class="s2">&quot;zeMirco&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Every time a user logs in with Persona <code>navigator.id.request()</code> is called and a <code>POST</code> request to <code>/auth/login</code> is made.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">onlogin</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">assertion</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#token&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/auth/login&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">assertion</span><span class="o">:</span> <span class="nx">assertion</span><span class="p">,</span> <span class="nx">_csrf</span><span class="o">:</span> <span class="nx">token</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">reload</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ll get to the <code>token</code> and <code>_csrf</code> stuff later in this post. On the server the assertion is verified by posting it and the <code>audience</code> to Mozilla.
As soon as we get a valid answer back we have to do the following:</p>

<ol>
<li>Check if the email is stored in our db</li>
<li>If not create a new user with an empty <code>username</code> property and save him to the db</li>
<li>If the email is already present in our db do nothing (we have a returning user)</li>
</ol>


<p>Unfortunately Persona doesn&#8217;t tell us whether the user is a new or existing one. That&#8217;s why we have to check for existence on every login. CouchDB provides a handy feature to check for document existence. Instead of making a full <code>GET</code> request with the email as <code>key</code>
we can simply use a lightweight <code>HEAD</code> request. Read more about this trick at <a href="http://eclipsesource.com/blogs/2013/03/01/use-your-head-checking-couchdb-document-existence/">Use your head checking CouchDB document existence</a>.
If we get back an error with status code <code>404</code> we have a new user. Therefore save him to db.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">head</span><span class="p">(</span><span class="nx">email</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">body</span><span class="p">,</span> <span class="nx">header</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span><span class="p">.</span><span class="nx">status_code</span> <span class="o">===</span> <span class="mi">404</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// email is not in db</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">username</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="nx">db</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="nx">doc</span><span class="p">,</span> <span class="nx">email</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">resp</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// email is already stored in db</span>
</span><span class='line'>    <span class="nx">resp</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sweet, we can now save our users to db and differentiate between new and existing ones. Problem is we somehow have to remember who is logged in and who isn&#8217;t.
We don&#8217;t want ours users to make the login call on every request. Therefore we have to use <strong>sessions</strong>.</p>

<h3>Cookie session</h3>

<p>Express offers cookie based session support via the <a href="http://www.senchalabs.org/connect/">connect</a> <a href="http://www.senchalabs.org/connect/cookieSession.html">cookieSession</a> middleware.
You could also use Mozilla&#8217;s own implementation <a href="https://github.com/mozilla/node-client-sessions">node-client-sessions</a> or some key value stores like Redis.
Read more about the pros and cons of cookies vs stores at <a href="https://hacks.mozilla.org/2012/12/using-secure-client-side-sessions-to-build-simple-and-scalable-node-js-applications-a-node-js-holiday-season-part-3/">Using secure client-side sessions to build simple and scalable Node.JS applications</a>.</p>

<p>To enable cookie sessions in Express add the following middleware to your config.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// built in middleware</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">cookieParser</span><span class="p">(</span><span class="s1">&#39;your secret here&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">cookieSession</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can now create sessions on login <code>req.session.email = email</code> and destroy them on logout <code>req.session = null</code>. Our users can also
visit the <code>/profile</code> route which is protected and not accessible for users without any valid session.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// middleware to restrict access to internal routes like /profile</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">restrict</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">email</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use the middleware in your routes</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/profile&#39;</span><span class="p">,</span> <span class="nx">restrict</span><span class="p">,</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">get</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Content Security Policy</h3>

<p><a href="https://developer.mozilla.org/en-US/docs/Security/CSP">Content Security Policy</a> (simply said) tells the browser to use JavaScript (and images, style sheets, frames, etc.)
only from your own domain while forbidding inline script and script from third party URLs. It adds another layer of security against XSS attacks.</p>

<p><a href="https://github.com/evilpacket/helmet">Helmet</a> is a great middleware to set CSP headers in Express. It also offers several other layers of security.
In my app I&#8217;ll write the headers by hand as it only requires a few lines of code.</p>

<p>Check for browser support and implementation at <a href="http://caniuse.com/#feat=contentsecuritypolicy">caniuse#contentsecuritypolicy</a>.
Firefox and IE10 need the <code>X-Content-Security-Policy</code> header while Safari and Chrome need <code>X-WebKit-CSP</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">policy</span> <span class="o">=</span>  <span class="s2">&quot;default-src &#39;self&#39;;&quot;</span> <span class="o">+</span>
</span><span class='line'>              <span class="s2">&quot;frame-src &#39;self&#39; https://login.persona.org;&quot;</span> <span class="o">+</span>
</span><span class='line'>              <span class="s2">&quot;script-src &#39;self&#39; &#39;unsafe-inline&#39; https://login.persona.org;&quot;</span> <span class="o">+</span>
</span><span class='line'>              <span class="s2">&quot;style-src &#39;self&#39; &#39;unsafe-inline&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Firefox and Internet Explorer</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">header</span><span class="p">(</span><span class="s2">&quot;X-Content-Security-Policy&quot;</span><span class="p">,</span> <span class="nx">policy</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// Safari and Chrome</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">header</span><span class="p">(</span><span class="s2">&quot;X-WebKit-CSP&quot;</span><span class="p">,</span> <span class="nx">policy</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// continue with next middleware</span>
</span><span class='line'>  <span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In theory adding <code>'unsafe-inline'</code> shouldn&#8217;t be necessary but I got errors in Chrome caused by jQuery. Maybe they are related to <a href="http://bugs.jquery.com/ticket/13507">jQuery bug #13507</a>.
You can verify the headers in the browser&#8217;s development tools.</p>

<p><img src="https://s3.amazonaws.com/mircozeiss.com/persona-csp.png" title="Content Security Policy Headers" ></p>

<h3>CSRF protection</h3>

<p>A great explanation for Cross-Site Request Forgery is the paper <a href="http://www.adambarth.com/papers/2008/barth-jackson-mitchell-b.pdf">Robust Defenses for Cross-Site Request Forgery</a>.
Express provides a built in middleware <a href="http://www.senchalabs.org/connect/csrf.html">csrf</a> which makes the use of CSRF very easy.</p>

<p>Our own custom middleware makes the <code>token</code> variable available to all our views and we can use it whenever we have to change the state on the server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">locals</span><span class="p">.</span><span class="nx">token</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">_csrf</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s usually done by adding a hidden input field to the forms.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">form</span><span class="nf">#login</span><span class="nc">.navbar-form.pull-right</span>
</span><span class='line'>  <span class="nt">input</span><span class="nf">#token</span>(<span class="na">type=</span><span class="s">&quot;hidden&quot;</span><span class="err">,</span> <span class="na">name=</span><span class="s">&quot;_csrf&quot;</span><span class="err">,</span> <span class="na">value=</span><span class="nv">token</span>)
</span><span class='line'>  <span class="nt">button</span><span class="nc">.btn</span>(<span class="na">type=</span><span class="s">&quot;submit&quot;</span>) Login
</span></code></pre></td></tr></table></div></figure>


<p>The token is sent to the server and <code>app.use(express.csrf());</code> checks if it is equal to <code>req.session._csrf</code>. If it isn&#8217;t Express throws a <code>403</code> error.
We not only have to include the token in forms but also when we make ajax requests.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#token&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/auth/login&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">assertion</span><span class="o">:</span> <span class="nx">assertion</span><span class="p">,</span> <span class="nx">_csrf</span><span class="o">:</span> <span class="nx">token</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">reload</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>That explains the additional <code>_csrf</code> key.</p>

<h3>Sending <em>loggedInUser</em> from server to client JavaScript</h3>

<p>The <a href="https://developer.mozilla.org/en-US/docs/DOM/navigator.id.watch"><code>navigator.id.watch</code></a> function requires the <code>loggedInUser</code> parameter,
which tells Persona what you believe about the user&#8217;s state.</p>

<p><a href="https://github.com/mozilla/123done/blob/master/static/js/123done.js#L42-L44">123done</a> makes a GET request to <code>/api/auth_status</code> in order to get <code>loggedInUser</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/api/auth_status&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">loggedInEmail</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">).</span><span class="nx">logged_in_email</span><span class="p">;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>and the server responds with the current session.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/api/auth_status&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">logged_in_email</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">user</span> <span class="o">||</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/lloyd/node.js-persona-example/blob/master/views/index.ejs#L15">node.js-persona-example</a> uses inline JavaScript
and puts the variable via <a href="https://github.com/visionmedia/ejs">ejs</a> directly into the view.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>navigator.id.watch({
</span><span class='line'>  loggedInUser: <span class="err">&lt;</span>%- JSON.stringify(email) %&gt;,
</span><span class='line'>  ...
</span><span class='line'>})
</span></code></pre></td></tr></table></div></figure>


<p>The server renders the view with the local variable <code>email</code> with holds the current session.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;index.ejs&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">email</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">email</span> <span class="o">||</span> <span class="kc">null</span> <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/lloyd/myfavoritebeer.org/blob/master/static/js/main.js#L135-L138">myfavoritebeer.org</a> also makes a GET request. This time to <code>/api/whoami</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/api/whoami&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">res</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="nx">loggedOut</span><span class="p">();</span>
</span><span class='line'>  <span class="k">else</span> <span class="nx">loggedIn</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="s1">&#39;json&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The server responds with the email from the current session and the corresponding image from <a href="https://www.libravatar.org/">Libravatar</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;/api/whoami&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">session</span> <span class="o">&amp;&amp;</span> <span class="k">typeof</span> <span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">email</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">respondWithUserInfo</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">respondWithUserInfo</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">libravatar</span><span class="p">.</span><span class="nx">url</span><span class="p">({</span><span class="nx">email</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span> <span class="nx">size</span><span class="o">:</span> <span class="mi">32</span><span class="p">,</span> <span class="nx">http</span><span class="o">:</span> <span class="kc">false</span><span class="p">},</span>
</span><span class='line'>    <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">avatar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span><span class="s1">&#39;email&#39;</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span> <span class="s1">&#39;avatar&#39;</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">});</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span><span class="s1">&#39;email&#39;</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span> <span class="s1">&#39;avatar&#39;</span><span class="o">:</span> <span class="nx">avatar</span><span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Last but not least <a href="https://github.com/mozilla/browserid-cookbook/blob/master/node-express/views/layout.jade#L17-L22">browserid-cookbook</a>
uses inline script (this time with Jade instead ejs) to pass the current user to the frontend.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='jade'><span class='line'><span class="nt">if</span> user
</span><span class='line'>  <span class="nt">script</span>
</span><span class='line'>    <span class="nt">var</span> loggedInUser = &#39;<span class="si">#{</span><span class="n">user</span><span class="si">}</span>&#39;;
</span><span class='line'><span class="nt">else</span>
</span><span class='line'>  <span class="nt">script</span>
</span><span class='line'>    <span class="nt">var</span> loggedInUser = null;
</span></code></pre></td></tr></table></div></figure>


<p>The server sets the local variable <code>loggedInUser</code> from the current session.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">index</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">resp</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">resp</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Express&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">user</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">csrf</span><span class="o">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">_csrf</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>In summary two examples use inline script and two use extra GET requests. What&#8217;s the better implementation?</p>

<p>In my opinion both aren&#8217;t perfect. Inline script is probably the easiest but worst solution, as it won&#8217;t work with a strict Content Security Policy.
An extra GET request costs time and you have to implement an additional route on your server. That&#8217;s why I chose a third solution. I use cookies to send
the current user from our backend to the frontend. Mozilla also recommends this way.</p>

<blockquote><p>&#8230; you might examine the browser&#8217;s cookies to determine who is signed in.</p></blockquote>

<p>We can set the cookie via a custom middleware. If the user isn&#8217;t logged in and doesn&#8217;t have a valid session no cookie is needed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">email</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">cookie</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">email</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the client we can read the cookie via the awesome <a href="https://github.com/carhartl/jquery-cookie">jquery-cookie</a> plugin.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">email</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">cookie</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="kc">null</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cookies have the advantage that they save the extra request to the server and don&#8217;t require inline script.</p>

<h3>Conclusion</h3>

<p>A few more steps than just the quick setup are needed to build a full featured web app based on Mozilla Persona. However it isn&#8217;t rocket science and I&#8217;ve learned a lot while developing this app.
Persona is a great technology and admins will have less to worry about, as no passwords are stored in the db.</p>

<p>I&#8217;m sure my example is far from being perfect so if you see any mistakes or find room for improvements please open an <a href="https://github.com/zeMirco/mozilla-persona-express-couchdb/issues">issue</a> at GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Async CouchDB queries with nano and promises]]></title>
    <link href="http://mircozeiss.com/async-couchdb-queries-with-nano-and-promises/"/>
    <updated>2013-04-21T00:00:00+02:00</updated>
    <id>http://mircozeiss.com/async-couchdb-queries-with-nano-and-promises</id>
    <content type="html"><![CDATA[<p>This post is about CouchDB and its <code>MapReduce</code> functionality. I&#8217;ll use simple <code>reduce</code>
functions to gather some statistics about soccer players. <a href="https://github.com/dscape/nano">Nano</a>
is used the query the database from
Node.js. To keep our code nice and tidy we&#8217;ll make use of <a href="https://github.com/promises-aplus/promises-spec">Promises</a>
through the <a href="https://github.com/kriskowal/q">q</a> module.</p>

<h3>1. CouchDB architecture</h3>

<p>Assuming we want to record every goal in a match and create some statistics to see who
 scored the most goals. Each goal is a single document in our CouchDB database</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="s2">&quot;_id&quot;</span><span class="o">:</span> <span class="s2">&quot;ee2459df977d62d196872dd0ae63ea13&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;_rev&quot;</span><span class="o">:</span> <span class="s2">&quot;1-e00b4c6130d022e7336cdafacd18f93a&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;playerId&quot;</span><span class="o">:</span> <span class="s2">&quot;4&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;goal&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>type</code> key simply helps to differentiate between other documents (could be players with
name, age, price, etc.) and our <code>goal</code> documents.</p>

<p>With a simple <code>map</code> function we get every goal by player</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;goal&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">emit</span><span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">playerId</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result of the <code>map</code> function looks similar to the following table</p>

<table class="table table-striped table-hover table-condensed table-bordered">
  <thead>
    <tr>
      <th>Key</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>“4”</td>
      <td>1</td>
    </tr>
    <tr>
      <td>“4”</td>
      <td>1</td>
    </tr>
    <tr>
      <td>“3”</td>
      <td>1</td>
    </tr>
    <tr>
      <td>“2”</td>
      <td>1</td>
    </tr>
    <tr>
      <td>“1”</td>
      <td>1</td>
    </tr>
    <tr>
      <td>“1”</td>
      <td>1</td>
    </tr>
    <tr>
      <td>“1”</td>
      <td>1</td>
    </tr>
    <tr>
      <td>“1”</td>
      <td>1</td>
    </tr>
    <tr>
      <td>“1”</td>
      <td>1</td>
    </tr>
  </tbody>
</table>


<p>The <strong>key</strong> represents the <code>playerId</code> and the <strong>value</strong> is <code>1</code> for every key. We need this
<strong>value</strong>
later on to calculate the total amout of goals scored by each player.</p>

<p>To get this total amout of goals we simply have to sum up all <strong>values</strong> per player. Therefore our <code>reduce</code>
function looks like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">_sum</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>_sum</code> is a built in <code>reduce</code> function provided by CouchDB. More native functions can be found in the
<a href="http://wiki.apache.org/couchdb/Built-In_Reduce_Functions">CouchDB Wiki</a>. The result of the above function looks like this</p>

<table class="table table-striped table-hover table-condensed table-bordered">
  <thead>
    <tr>
      <th>Key</th>
      <th>Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>“4”</td>
      <td>2</td>
    </tr>
    <tr>
      <td>“3”</td>
      <td>1</td>
    </tr>
    <tr>
      <td>“2”</td>
      <td>1</td>
    </tr>
    <tr>
      <td>“1”</td>
      <td>5</td>
    </tr>
  </tbody>
</table>


<p>That&#8217;s exactly what we wanted. We can now query our view and pass the playerId as <strong>key</strong> to get the final value.</p>

<h3>2. Using the database with nano</h3>

<p>Several modules exist on <a href="https://npmjs.org/search?q=couchdb">npm</a> to interact with CouchDB. The most popular ones are
probably</p>

<ul>
<li><a href="https://github.com/dscape/nano">nano</a> and</li>
<li><a href="https://github.com/cloudhead/cradle">cradle</a></li>
</ul>


<p>In this post I&#8217;ll use nano. I haven&#8217;t used cradle yet but I&#8217;m sure it offers similar functionality.</p>

<p>To save new documents to our db we use the <code>insert</code> function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="s2">&quot;1&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">playerId</span><span class="o">:</span> <span class="nx">id</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">nano</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="nx">doc</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;done&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The total amout of goals scored by each player is provided by the above created <code>MapReduce</code> function. We
can query this view using nano&#8217;s <code>view</code> function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">nano</span><span class="p">.</span><span class="nx">view</span><span class="p">(</span><span class="s1">&#39;goals&#39;</span><span class="p">,</span> <span class="s1">&#39;byPlayer_sum&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">key</span><span class="o">:</span> <span class="nx">playerId</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">body</span><span class="p">.</span><span class="nx">rows</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// no goals for this player</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">body</span><span class="p">.</span><span class="nx">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives us the sum for each player that we pass to CouchDB as a parameter <code>{key: playerId}</code>.</p>

<p>So, now we can store new documents and retrieve the sum via nano from our db. The problem is loading
multiple sums for different players at the same time and then display the results to our users. The easiest solution
is using a series of callback functions</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">nano</span><span class="p">.</span><span class="nx">view</span><span class="p">(</span><span class="s1">&#39;goals&#39;</span><span class="p">,</span> <span class="s1">&#39;byPlayer_sum&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">key</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">bodyOne</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">nano</span><span class="p">.</span><span class="nx">view</span><span class="p">(</span><span class="s1">&#39;goals&#39;</span><span class="p">,</span> <span class="s1">&#39;byPlayer_sum&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">key</span><span class="o">:</span> <span class="mi">2</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">bodyTwo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">nano</span><span class="p">.</span><span class="nx">view</span><span class="p">(</span><span class="s1">&#39;goals&#39;</span><span class="p">,</span> <span class="s1">&#39;byPlayer_sum&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">key</span><span class="o">:</span> <span class="mi">3</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">bodyThree</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="nx">nano</span><span class="p">.</span><span class="nx">view</span><span class="p">(</span><span class="s1">&#39;goals&#39;</span><span class="p">,</span> <span class="s1">&#39;byPlayer_sum&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">key</span><span class="o">:</span> <span class="mi">4</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">bodyFour</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="p">...</span>
</span><span class='line'>       <span class="p">});</span>
</span><span class='line'>     <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>That approach leads to the famous spaghetti code/callback hell/pyramide/christmas tree/you name it. Another
huge drawback is that all the request are made one after the other. CouchDB is great in handling a lot of
concurrent requests (see <a href="http://guide.couchdb.org/draft/why.html">Why CouchDB?</a>) so let&#8217;s not waste this feature.</p>

<p>A second approach is making parallel requests and after each requests check if the others are already done.
If they are done, continue with the code. The idea works like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">done</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="nx">nano</span><span class="p">.</span><span class="nx">view</span><span class="p">(</span><span class="s1">&#39;goals&#39;</span><span class="p">,</span> <span class="s1">&#39;byPlayer_sum&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">key</span><span class="o">:</span> <span class="mi">1</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">done</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">done</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">continue</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">nano</span><span class="p">.</span><span class="nx">view</span><span class="p">(</span><span class="s1">&#39;goals&#39;</span><span class="p">,</span> <span class="s1">&#39;byPlayer_sum&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">key</span><span class="o">:</span> <span class="mi">2</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">done</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">done</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">continue</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">nano</span><span class="p">.</span><span class="nx">view</span><span class="p">(</span><span class="s1">&#39;goals&#39;</span><span class="p">,</span> <span class="s1">&#39;byPlayer_sum&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">key</span><span class="o">:</span> <span class="mi">3</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">done</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">done</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">continue</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="k">continue</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// do something with the data in done</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That isn&#8217;t pretty either because we have to check for <code>done</code> in each request. Therefore let&#8217;s use promises.</p>

<h3>3. Wrapping query functions in promises</h3>

<p>The defacto module for using promises is <a href="https://github.com/kriskowal/q">q</a> by Kris Kowal. The documentation
is great and it is super easy to integrate as we will see now. Let&#8217;s write a promise for saving new documents
to db</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">save</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">nano</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span><span class="nx">doc</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another promise would be retrieving the sum of goals for each player</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">getScore</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">playerId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">deferred</span> <span class="o">=</span> <span class="nx">Q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">nano</span><span class="p">.</span><span class="nx">view</span><span class="p">(</span><span class="s1">&#39;goals&#39;</span><span class="p">,</span> <span class="s1">&#39;byPlayer_sum&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">key</span><span class="o">:</span> <span class="nx">playerId</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">deferred</span><span class="p">.</span><span class="nx">reject</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">body</span><span class="p">.</span><span class="nx">rows</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">deferred</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">body</span><span class="p">.</span><span class="nx">rows</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">deferred</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can make use of these two functions as follows</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>   <span class="s2">&quot;playerId&quot;</span><span class="o">:</span> <span class="s2">&quot;4&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;goal&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">save</span><span class="p">(</span><span class="nx">doc</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">getScore</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">score</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">score</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code almost reads like plain English. Save the new document to our db, then get the new score
for player with <code>id=4</code> and then log the score. Awesome!</p>

<p>We ended the second section with the problem of making multiple asyncronuous HTTP requests at the
 same time and deal with the values they each return. We already implemented the <code>getScore</code> function
  as a promise and used it in series with <code>then</code>. Using the same function more than once in parallel is
  almost as easy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/match&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Q</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
</span><span class='line'>    <span class="nx">getScore</span><span class="p">(</span><span class="s2">&quot;1&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">getScore</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">getScore</span><span class="p">(</span><span class="s2">&quot;3&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">getScore</span><span class="p">(</span><span class="s2">&quot;4&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">]).</span><span class="nx">spread</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">pOne</span><span class="p">,</span> <span class="nx">pTwo</span><span class="p">,</span> <span class="nx">pThree</span><span class="p">,</span> <span class="nx">pFour</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;match&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;The match&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">john</span><span class="o">:</span> <span class="nx">pOne</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">jack</span><span class="o">:</span> <span class="nx">pTwo</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">chris</span><span class="o">:</span> <span class="nx">pThree</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">nick</span><span class="o">:</span> <span class="nx">pFour</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Q.all</code> turns an array of promises into a single promise. <code>Spread</code> does what it&#8217;s named after
 and spreads the values over the arguments of our fulfillment handling function. That means
  <code>pOne</code> corresponds to the returned value of <code>getScore("1")</code>, <code>pTwo</code> to <code>getScore("2")</code> and so
  on. This makes it very easy to perform multiple asynchronuous HTTP request and continue as
soon as they are all done.</p>

<p>Here is a screenshot of a sample app I built to demonstrate all the principles I&#8217;ve talked about.</p>

<p><img src="https://s3.amazonaws.com/mircozeiss.com/couchdb-promises-nano.png" title="Express app for analyzing soccer players" ></p>

<h3>Conclusion</h3>

<p>CouchDB with Node.js, nano and q is a powerful combination. Huge web applications
 can be written while keeping a testable and maintainable structure. To learn more about promises
 I recommend watching the excellent talk by Alex McPherson <a href="http://www.youtube.com/watch?v=juRtEEsHI9E">I .promise() to show you .when() to use Deferreds</a>.
 In this post I didn&#8217;t talk about <a href="https://github.com/kriskowal/q#handling-errors">error handling</a> when using promises. That would have been too much,
 but make sure you always handle errors, as they might crash your whole application.</p>

<p>So start using promises today and
 follow the <a href="http://blog.izs.me/post/48281998870/unix-philosophy-and-node-js">unix philosophy</a>:</p>

<blockquote><p>Write programs that do one thing and do it well.</p></blockquote>

<p>As always you can find the whole code with a working Express sample application at GitHub <a href="https://github.com/zeMirco/zemirco.github.io/tree/source/code-examples/couchdb-promises">couchdb-promises</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to pass JavaScript variables from a server to Angular.js]]></title>
    <link href="http://mircozeiss.com/how-to-pass-javascript-variables-from-a-server-to-angular/"/>
    <updated>2013-04-13T00:00:00+02:00</updated>
    <id>http://mircozeiss.com/how-to-pass-javascript-variables-from-a-server-to-angular</id>
    <content type="html"><![CDATA[<p>I came across the problem of sending JavaScript variables from my backend,
in this case an <a href="http://expressjs.com/">Express.js</a> server,
to my frontend, means an <a href="http://angularjs.org/">Angular.js</a> controller. I&#8217;m using <a href="http://jade-lang.com/">Jade</a> as my template engine but the
presented solutions should work with others, too.</p>

<p>Basically you&#8217;ve got three options for doing this:</p>

<ol>
<li>Put the variable into the view file inside a <code>script</code> tag</li>
<li>Make an HTTP request from Angular and serve the data as JSON from the
backend</li>
<li>Be smart and use <code>ng-init</code></li>
</ol>


<p>At the end of the article you find a link to a GitHub repo containing working
examples for all the presented solutions. To play with the code fork and
modify it according to your needs or start from scratch and add code while
reading on. So, let&#8217;s start.</p>

<p>First create an empty directory, use <code>express</code> command to create all necessary files and run
<code>npm install</code> to download additional modules. At the end start your server with <code>node app.js</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir express-to-ngcontroller
</span><span class='line'><span class="nb">cd </span>express-to-ngcontroller
</span><span class='line'>express
</span><span class='line'>npm install
</span><span class='line'>node app.js
</span></code></pre></td></tr></table></div></figure>


<p>Afterwards you should see the message</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Express server listening on port 3000
</span></code></pre></td></tr></table></div></figure>


<p>So far we&#8217;ve just set up our backend. Now it&#8217;s time to add some Angular code to your <code>layout.jade</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>doctype 5
</span><span class='line'>html<span class="o">(</span>ng-app<span class="o">)</span>
</span><span class='line'>  head
</span><span class='line'>    <span class="nv">title</span><span class="o">=</span> title
</span><span class='line'>    link<span class="o">(</span><span class="nv">rel</span><span class="o">=</span><span class="s1">&#39;stylesheet&#39;</span>, <span class="nv">href</span><span class="o">=</span><span class="s1">&#39;/stylesheets/style.css&#39;</span><span class="o">)</span>
</span><span class='line'>    script<span class="o">(</span><span class="nv">src</span><span class="o">=</span><span class="s2">&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular.min.js&quot;</span><span class="o">)</span>
</span><span class='line'>    script<span class="o">(</span><span class="nv">src</span><span class="o">=</span><span class="s2">&quot;/javascripts/controller.js&quot;</span><span class="o">)</span>
</span><span class='line'>  body
</span><span class='line'>    a<span class="o">(</span><span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/solution-one&quot;</span><span class="o">)</span> solution one
</span><span class='line'>    span -
</span><span class='line'>    a<span class="o">(</span><span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/solution-two&quot;</span><span class="o">)</span> solution two
</span><span class='line'>    span -
</span><span class='line'>    a<span class="o">(</span><span class="nv">href</span><span class="o">=</span><span class="s2">&quot;/solution-three&quot;</span><span class="o">)</span> solution three
</span><span class='line'>    block content
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s have a look at the above code. Activate Angular for the whole page by
adding <code>ng-app</code> as an attribute to the <code>html</code> tag. Load <code>angular.min.js</code> from
 Google CDN and <code>controller.js</code> from file. Inside the body I created a basic
 menu to navigate from one
solution to the other.</p>

<p>Last but not least create some dummy data at the server. In production this
data is loaded from a database, but in this example I want to keep everything
 nice and simple. Copy the following code to your <code>app.js</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="mi">1</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;john&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">email</span><span class="o">:</span> <span class="s1">&#39;john@email.com&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="mi">2</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;peter&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">email</span><span class="o">:</span> <span class="s1">&#39;peter@email.com&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="mi">3</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;max&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">email</span><span class="o">:</span> <span class="s1">&#39;max@email.com&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now everything should be set up and we can start tinkering with the different
 solutions.</p>

<h3>1. Put variable inside view file</h3>

<p>Inside your <code>app.js</code> file create an additional route for <code>GET /solution-one</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/solution-one&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;solutionOne&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Express and Angular marriage&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">users</span><span class="o">:</span> <span class="nx">users</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We pass our <code>users</code> object to the view as a local variable named
<code>users</code>. Running this code would throw an error as we haven&#8217;t created the view
<code>solutionOne.jade</code> yet. Create this file inside the <code>views/</code> directory and
put the following code inside</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">extends</span> <span class="nx">layout</span>
</span><span class='line'>
</span><span class='line'><span class="nx">block</span> <span class="nx">content</span>
</span><span class='line'>  <span class="nx">div</span><span class="p">(</span><span class="nx">ng</span><span class="o">-</span><span class="nx">controller</span><span class="o">=</span><span class="s2">&quot;UserCtrl&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">h1</span><span class="o">=</span> <span class="nx">title</span>
</span><span class='line'>    <span class="nx">p</span> <span class="nx">Welcome</span> <span class="nx">to</span> <span class="err">#</span><span class="p">{</span><span class="nx">title</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">ul</span>
</span><span class='line'>      <span class="nx">li</span><span class="p">(</span><span class="nx">ng</span><span class="o">-</span><span class="nx">repeat</span><span class="o">=</span><span class="s2">&quot;user in users&quot;</span><span class="p">)</span> <span class="p">{{</span> <span class="nx">user</span><span class="p">.</span><span class="nx">name</span> <span class="p">}}</span> <span class="o">-</span> <span class="p">{{</span><span class="nx">user</span><span class="p">.</span><span class="nx">email</span><span class="p">}}</span>
</span><span class='line'>  <span class="nx">script</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="o">!</span><span class="p">{</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">users</span><span class="p">)}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With <code>ng-controller="UserCtrl"</code> we tell Angular which controller we&#8217;d like
 to use for all the DOM children of this element. At the bottom of the file
 we&#8217;ve put some extra JavaScript with a global variable called <code>users</code> that
 loads the contents from the local variable <code>users</code> passed to the view.
 Notice that we have to use <code>!{}</code> instead of <code>#{}</code>, which is usually used in
 Jade for interpolation. However <code>#{}</code> escapes HTML code and would create
 something like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">{</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="mi">1</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="o">:</span><span class="p">{</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="o">:&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">john</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;,</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">email</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="o">:&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">john</span><span class="err">@</span><span class="nx">email</span><span class="p">.</span><span class="nx">com</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;},</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="mi">2</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="o">:</span><span class="p">{</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="o">:&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">peter</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;,</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">email</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="o">:&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">peter</span><span class="err">@</span><span class="nx">email</span><span class="p">.</span><span class="nx">com</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;},</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="mi">3</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="o">:</span><span class="p">{</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">name</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="o">:&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">max</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;,</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">email</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="o">:&amp;</span><span class="nx">quot</span><span class="p">;</span><span class="nx">max</span><span class="err">@</span><span class="nx">email</span><span class="p">.</span><span class="nx">com</span><span class="o">&amp;</span><span class="nx">quot</span><span class="p">;}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s not what we want. We want a nicely formatted String representation of
our JSON object. That&#8217;s why we need <code>!{}</code>.</p>

<p>Then we need to load the content of this variable into our Angular scope.
This is necessary for the <code>ng-repeat</code> directive as it doesn&#8217;t work with
variables, which are outside of the Angular scope. Open <code>controller.js</code> and
 put the following code inside.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">UserCtrl</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">users</span> <span class="o">=</span> <span class="nx">users</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Start the server with <code>node app.js</code> and navigate to <code>/solution-one</code>. You
should see a list with our three users where each list item contains the
<code>name</code> and <code>email</code>. Nice, solution one works but let&#8217;s have a look at the
pros and cons.</p>

<h4>Pro</h4>

<p>Solution one is probably the easiest to understand and fastest to implement.
Every step is comprehensible and nothing fancy is going on.</p>

<h4>Contra</h4>

<p>Using global variables in JavaScript is a No-Go. However in this case it is
not that bad as the content of the global variable <code>users</code> is loaded into
scope at page load. Manipulating <code>users</code> afterwards doesn&#8217;t have any effects
on the scope and our frontend.</p>

<p>Still it is not the best solution. Let&#8217;s look at another one.</p>

<h3>2. HTTP request from Angular to a JSON API</h3>

<p>Inside <code>app.js</code> create another route for <code>GET /solution-two</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/solution-two&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;solutionTwo&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Express and Angular marriage&#39;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>and create the view <code>solutionTwo.jade</code> inside the <code>views/</code> folder with the
following content</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">extends</span> <span class="nx">layout</span>
</span><span class='line'>
</span><span class='line'><span class="nx">block</span> <span class="nx">content</span>
</span><span class='line'>  <span class="nx">div</span><span class="p">(</span><span class="nx">ng</span><span class="o">-</span><span class="nx">controller</span><span class="o">=</span><span class="s2">&quot;UserTwoCtrl&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">h1</span><span class="o">=</span> <span class="nx">title</span>
</span><span class='line'>    <span class="nx">p</span> <span class="nx">Welcome</span> <span class="nx">to</span> <span class="err">#</span><span class="p">{</span><span class="nx">title</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">ul</span>
</span><span class='line'>      <span class="nx">li</span><span class="p">(</span><span class="nx">ng</span><span class="o">-</span><span class="nx">repeat</span><span class="o">=</span><span class="s2">&quot;user in users&quot;</span><span class="p">)</span> <span class="p">{{</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">}}</span> <span class="o">-</span> <span class="p">{{</span><span class="nx">user</span><span class="p">.</span><span class="nx">email</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You might have noticed that we haven&#8217;t passed any data as local variables
from our Express backend to the view. When you start the server and navigate
with your browser to <code>/solution-one</code> you won&#8217;t see any users listed. We did
add another controller <code>UserTwoCtrl</code> to our view and we will add some
functionality now.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">UserTwoCtrl</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/solution-two/data&#39;</span><span class="p">).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">users</span> <span class="o">=</span> <span class="nx">data</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As soon as the controller is initiated by Angular it automatically makes a
 GET request to <code>/solution-two/data</code> and assigns the fetched data to <code>$scope.users</code>.
 Now refresh the page and see what happened. You should see an
 error saying</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Failed</span> <span class="nx">to</span> <span class="nx">load</span> <span class="nx">resource</span><span class="o">:</span> <span class="nx">the</span> <span class="nx">server</span> <span class="nx">responded</span> <span class="kd">with</span> <span class="nx">a</span> <span class="nx">status</span> <span class="nx">of</span> <span class="mi">404</span> <span class="p">(</span><span class="nx">Not</span> <span class="nx">Found</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your terminal running the server should log</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">GET</span> <span class="o">/</span><span class="nx">solution</span><span class="o">-</span><span class="nx">two</span><span class="o">/</span><span class="nx">data</span> <span class="mi">404</span>
</span></code></pre></td></tr></table></div></figure>


<p>It simply means that we haven&#8217;t implemented the route <code>GET
/solution-two/data</code> yet. So let&#8217;s do this by adding the following code to the
 <code>app.js</code> file</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/solution-two/data&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">users</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Restart the server and with your browser go to <code>/solution-two/data</code>. You
should see our <code>users</code> object as JSON. Now go to <code>/solution-two</code> and, voila,
everything works as expected. Three list items are created each showing name
and email. The screenshot shows the extra request as the last action.</p>

<p><img src="https://s3.amazonaws.com/mircozeiss.com/angular-extra-http-request.png" title="Angular HTTP request fetching JSON data" ></p>

<h4>Pro</h4>

<p>Making HTTP request in order to get JSON data is common these days.
Every major web service offers some kind of API to allow third party access.
In theses cases, where you don&#8217;t have the necessary data on your own server,
it is the best solution to make an HTTP request from your frontend. You
could, of course, make the request from the server, get the data and send it
to the client as shown in solution one. This, however,
adds unnecessary overhead to our server and by calling the API from the
client we can save valuable resources.</p>

<h4>Contra</h4>

<p>The second solution needs the most additional code and also an extra route
from which the data is served as JSON. This can get a bit messy because you
basically have to serve every route twice. Once for the view and once for the
data. Therefore it is still not the perfect solution, which leads us to our last
method.</p>

<h3>3. Be smart and use ng-init</h3>

<p>The third and probably best solution makes use of the <a href="http://docs-angularjs-org-dev.appspot.com/api/ng.directive:ngInit">ngInit</a> directive.</p>

<blockquote><p>The ngInit directive specifies initialization tasks to be executed before
the template enters execution mode during bootstrap.</p></blockquote>

<p>What does that mean?</p>

<p>Short answer: The expression (variable + content) given to ngInit is loaded
into scope and made available under this name.</p>

<p>Let&#8217;s have a look at the example from the Angular docs</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">ng-app</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.angularjs.org/angular-1.0.2.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">ng-init=</span><span class="s">&quot;greeting=&#39;Hello&#39;; person=&#39;World&#39;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      {{greeting}} {{person}}!
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The variable <code>$scope.greeting</code> holds the String <code>'Hello'</code> and <code>$scope.person='World'</code>. Both are available inside the scope although not explicitly
 specified inside a controller.</p>

<p>We could rewrite and simplify the example like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">MyCtrl</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">greeting</span> <span class="o">=</span> <span class="s1">&#39;Hello&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">person</span> <span class="o">=</span> <span class="s1">&#39;World&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">ng-app</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.angularjs.org/angular-1.0.2.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/javascripts/controller.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;MyCtrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      {{greeting}} {{person}}!
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So let&#8217;s combine this approach and our initial problem. First,
add a new route <code>GET /solution-three</code> to <code>app.js</code> and create the
corresponding view <code>solutionThree.jade</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/solution-three&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;solutionThree&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Express and Angular marriage&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">users</span><span class="o">:</span> <span class="nx">users</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">extends</span> <span class="nx">layout</span>
</span><span class='line'>
</span><span class='line'><span class="nx">block</span> <span class="nx">content</span>
</span><span class='line'>  <span class="nx">div</span><span class="p">(</span><span class="nx">ng</span><span class="o">-</span><span class="nx">controller</span><span class="o">=</span><span class="s2">&quot;UserThreeCtrl&quot;</span><span class="p">,</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">init</span><span class="o">=</span><span class="s2">&quot;users= #{JSON.stringify(users)}&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">h1</span><span class="o">=</span> <span class="nx">title</span>
</span><span class='line'>    <span class="nx">p</span> <span class="nx">Welcome</span> <span class="nx">to</span> <span class="err">#</span><span class="p">{</span><span class="nx">title</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">ul</span>
</span><span class='line'>      <span class="nx">li</span><span class="p">(</span><span class="nx">ng</span><span class="o">-</span><span class="nx">repeat</span><span class="o">=</span><span class="s2">&quot;user in users&quot;</span><span class="p">)</span> <span class="p">{{</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">}}</span> <span class="o">-</span> <span class="p">{{</span><span class="nx">user</span><span class="p">.</span><span class="nx">email</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see we pass our <code>users</code> variable to the Jade template as a local
variable. Inside the template we convert the JSON object to its String
representation and assign it to the Angular variable <code>users</code>. Later on we
have access to this variable and use a regular <code>ngRepeat</code> directive to create
 the list of users. Start the server, navigate to <code>/solution-three</code> and
 you should the expected list of users.</p>

<h4>Pro</h4>

<p>It is the cleanest solution. We don&#8217;t have to use global variables and we
don&#8217;t have to make an extra HTTP request. It is also the solution that needs
the least amount of code.</p>

<h4>Contra</h4>

<p>The concept behind <code>ngInit</code> might be a bit confusing at the beginning. For
further insights and to understand how Angular actually renders a page I
recommend reading <a href="http://docs.angularjs.org/guide/bootstrap">Bootstrap</a> (not
 related to <a href="http://twitter.github.io/bootstrap/">Twitter&#8217;s Bootstrap</a>) and
 <a href="http://docs.angularjs.org/guide/compiler">HTML Compiler</a>.</p>

<h3>Conclusion</h3>

<p>You&#8217;ve learned that several solutions exist for passing data from your backend to an Angular
controller. While solution one being the worst it depends on your architecture and your requirements
whether solution two or three fits better. I personally tend to use the last solution as I have to make
one less request to the server.</p>

<p>As promised at the beginning you can find the working example at GitHub under
 <a href="https://github.com/zeMirco/zemirco.github.io/tree/source/code-examples/server-vars-ngcontroller">server-vars-ngcontroller</a>.</p>

<p><strong>Pro Tip</strong>: Don&#8217;t mix Jade&#8217;s <code>for user in users</code> and <code>ng-repeat="user in users"</code>
 from Angular. I did that once at the beginning and was totally frustrated
 because nothing worked as expected. You can image my feelings when I found
 that mistake. Well, it was late that night!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Init]]></title>
    <link href="http://mircozeiss.com/blog-init/"/>
    <updated>2013-04-12T00:00:00+02:00</updated>
    <id>http://mircozeiss.com/blog-init</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been playing with the idea for some time and today I finally start my own blog.</p>

<p>You&#8217;ll read about JavaScript, web technologies and solutions I came across developing web applications.</p>

<p> The blog is powered by <a href="http://octopress.org/">Octopress</a> and
 hosted on <a href="http://pages.github.com/">GitHub pages</a>. You can find the repo at
 <a href="https://github.com/zeMirco/zemirco.github.io">zemirco.github.io</a>. I got the domain
 <a href="http://www.mircozeiss.com">mircozeiss.com</a> from <a href="http://www.hetzner.de/en/">Hetzner</a> and, being
 a developer and not a designer, I&#8217;m very thankful for <a href="http://lucaslew.com/">Lucas Lew</a> who
 created the <a href="https://github.com/lucaslew/whitespace">whitespace</a> theme.</p>

<p>If you&#8217;ve got some ideas for improvements send me an email to
<a href="mailto:mirco.zeiss@gmail.com">mirco.zeiss@gmail.com</a> or write something below.</p>
]]></content>
  </entry>
  
</feed>
