<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Angular.js | Mirco Zeiss]]></title>
  <link href="http://mircozeiss.com/categories/angular-dot-js/atom.xml" rel="self"/>
  <link href="http://mircozeiss.com/"/>
  <updated>2013-07-15T21:07:23+02:00</updated>
  <id>http://mircozeiss.com/</id>
  <author>
    <name><![CDATA[Mirco Zeiss]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sync multiple AngularJS apps without server via PouchDB]]></title>
    <link href="http://mircozeiss.com/sync-multiple-angularjs-apps-without-server-via-pouchdb/"/>
    <updated>2013-07-10T20:34:00+02:00</updated>
    <id>http://mircozeiss.com/sync-multiple-angularjs-apps-without-server-via-pouchdb</id>
    <content type="html"><![CDATA[<p>Nowadays several solutions exist to keep web apps in sync and/or store data offline with JavaScript:</p>

<ul>
<li><a href="http://socket.io/">Socket.io</a></li>
<li><a href="http://www.breezejs.com/">Breeze.js</a></li>
<li><a href="https://towtruck.mozillalabs.com/">TowTruck</a></li>
<li><a href="https://www.firebase.com/">Firebase</a></li>
<li><a href="http://pusher.com/">Pusher</a></li>
<li><a href="https://parse.com/products">Parse</a></li>
<li>and my latest favorite <a href="http://hood.ie/">Hood.ie</a></li>
</ul>


<p>I could go on with that list but you get the idea. Some of the mentioned technologies are more powerful
and have more features out of the box than others. They usually need a server that runs your app and
takes care of all the business logic. In this post I will demonstrate how to build a web app that
syncs data automatically, runs on all modern platforms, stores data persistently and <strong>doesn't need a server</strong>.
The app is powered by <a href="http://angularjs.org/">AngularJS</a> and <a href="http://pouchdb.com/">PouchDB</a>.</p>

<p>The video shows the final app in action. On the left side we have Chrome and Firefox showing our <code>index.html</code> from file and
on the right side you can see Futon, the admin panel for CouchDB.</p>

<iframe width="640" height="480" src="http://www.youtube.com/embed/QSC1fnfUlU0" frameborder="0" allowfullscreen></iframe>


<br>


<br>


<h3>Install CouchDB</h3>

<p>First of all you have to install CouchDB. You could use some third party instance provider like <a href="https://cloudant.com/">Cloudant</a>
 or <a href="http://www.iriscouch.com/">Iris Couch</a>. However our final example won't work with them because we need to have CORS enabled on our CouchDB.
 CORS was introduced with v1.3. Cloudant instances are running on v1.0.2 whereas Iris Couch actually provides
  v1.3. Sadly you cannot enable CORS by hand. That's why we will work with our own instance.</p>

<p>Go to <a href="http://couchdb.apache.org/">couchdb.apache.org</a> and click on the big fat download button. Download
the package for your operating system, select a mirror, wait and then open CouchDB. On my MacBook I get
a little CouchDB icon on my Menu Bar. Click on it and select <strong>Open admin console</strong>. Or just open your browser and navigate to
<a href="http://127.0.0.1:5984/_utils/">127.0.0.1:5984/_utils</a>. You are now inside Futon, which is the admin tool for CouchDB.</p>

<p>First of all we have to <a href="http://docs.couchdb.org/en/latest/cors.html">enable CORS</a>. Go to section <em>httpd</em> and
set <strong>enable_cors</strong> to true. Navigate to the bottom of the page and click on <strong>Add a new section</strong>. Enter the following into
the form that pops up</p>

<ul>
<li>section: cors</li>
<li>option: origins</li>
<li>value: *</li>
</ul>


<p>Now let's create our database. Click on <strong>Create database ...</strong> and enter <code>ng-db</code>. The name is important and we have
to use the exact name later on for the client code. That's it! Our CouchDB instance is running, CORS is enabled
and we have a database to work with. Next install PouchDB.</p>

<h3>Download PouchDB</h3>

<p>To add PouchDB to your app you simply have to <a href="http://download.pouchdb.com/pouchdb-nightly.min.js">download</a> the JS file. As always I recommend working with the
non-minified version during development and switch to the min version for deployment. Include the .js file inside
your index.html.</p>

<p>```html</p>

<script src="pouchdb.js"></script>


<p>```</p>

<p>Done. We can now start using PouchDB in our app.</p>

<h3>Create AngularJS app</h3>

<p>Activate AngularJS as shown in the <a href="http://angularjs.org/">docs</a>.</p>

<p><code>js
var myApp = angular.module('myApp', []);
</code></p>

<h4>PouchDB service</h4>

<p>The first service we create simply makes the PouchDB instance available inside the AngularJS world.
It also turns on continuous replication so changes are automatically synced between database and client
no matter where they occur.</p>

<p>```js
myApp.factory('myPouch', [function() {</p>

<p>  var mydb = new Pouch('ng-pouch');
  Pouch.replicate('ng-pouch', 'http://127.0.0.1:5984/ng-db', {continuous: true});
  Pouch.replicate('http://127.0.0.1:5984/ng-db', 'ng-pouch', {continuous: true});
  return mydb;</p>

<p>}]);
```</p>

<h4>PouchDB promises wrapper</h4>

<p>Our second service is a simple wrapper around PouchDB's native API to save and remove documents. The
service provides two helper functions <code>return()</code> and <code>remove(id)</code> that both return promises. That keeps
the async code nice and tidy.</p>

<p>```js
myApp.factory('pouchWrapper', ['$q', '$rootScope', 'myPouch', function($q, $rootScope, myPouch) {</p>

<p>  return {</p>

<pre><code>add: function(text) {
  var deferred = $q.defer();
  var doc = {
    type: 'todo',
    text: text
  };
  myPouch.post(doc, function(err, res) {
    $rootScope.$apply(function() {
      if (err) {
        deferred.reject(err)
      } else {
        deferred.resolve(res)
      }
    });
  });
  return deferred.promise;
},
remove: function(id) {
  var deferred = $q.defer();
  myPouch.get(id, function(err, doc) {
    $rootScope.$apply(function() {
      if (err) {
        deferred.reject(err);
      } else {
        myPouch.remove(doc, function(err, res) {
          $rootScope.$apply(function() {
            if (err) {
              deferred.reject(err)
            } else {
              deferred.resolve(res)
            }
          });
        });
      }
    });
  });
  return deferred.promise;
}
</code></pre>

<p>  }</p>

<p>}]);
```</p>

<h4>PouchDB event listener</h4>

<p>Our last service is a listener that emits events whenever PouchDB fires the <code>onChange</code> event. It either
emits <code>newTodo</code> when a new document is added to the database or <code>delTodo</code> when a document is deleted. The change
object coming from PouchDB looks like the following</p>

<p><code>
{
  "id": "6F48205D-E97B-4621-ACAD-4CD3DFAC074E",
  "seq": 1,
  "changes": [{"rev":"2-96ea3cf93a75c6510c08c95e42686aa1"}],
  "deleted": true
}
</code></p>

<p>From the key <code>deleted</code> we get a Boolean value that tells us if the change was a deletion or an addition
to our database. If the value is <code>true</code> we know that an object was deleted from our database and we therefore
emit a <code>delTodo</code> event with the document id. If the value is <code>false</code> we unfortunately don't get the new
object directly from the <code>onChange</code> handler. We only get the document id and have to manually get it
via GET request. At the end we fire a <code>newTodo</code> event with the new document as data.</p>

<p>```js
myApp.factory('listener', ['$rootScope', 'myPouch', function($rootScope, myPouch) {</p>

<p>  myPouch.changes({</p>

<pre><code>continuous: true,
onChange: function(change) {
  if (!change.deleted) {
    $rootScope.$apply(function() {
      myPouch.get(change.id, function(err, doc) {
        $rootScope.$apply(function() {
          if (err) console.log(err);
          $rootScope.$broadcast('newTodo', doc);
        })
      });
    })
  } else {
    $rootScope.$apply(function() {
      $rootScope.$broadcast('delTodo', change.id);
    });
  }
}
</code></pre>

<p>  })
}]);
```</p>

<h4>Main controller</h4>

<p>Our controller combines the three services and creates a link to our view. First of all we create
an empty array that will hold our todo objects. The <code>submit()</code> function
is executed whenever the <strong>Add</strong> button is clicked. A click on the small cross calls the <code>remove(id)</code>
function.</p>

<p>At the end of our controller we have the listener for our two custom events <code>newTodo</code> and <code>delTodo</code>.
It adds or removes items from the <code>todos</code> array.</p>

<p>```js
myApp.controller('TodoCtrl', ['$scope', 'listener', 'pouchWrapper', function($scope, listener, pouchWrapper) {</p>

<p>  $scope.submit = function() {</p>

<pre><code>pouchWrapper.add($scope.text).then(function(res) {
  $scope.text = '';
}, function(reason) {
  console.log(reason);
})
</code></pre>

<p>  };</p>

<p>  $scope.remove = function(id) {</p>

<pre><code>pouchWrapper.remove(id).then(function(res) {
</code></pre>

<p>//      console.log(res);</p>

<pre><code>}, function(reason) {
  console.log(reason);
})
</code></pre>

<p>  };</p>

<p>  $scope.todos = [];</p>

<p>  $scope.$on('newTodo', function(event, todo) {</p>

<pre><code>$scope.todos.push(todo);
</code></pre>

<p>  });</p>

<p>  $scope.$on('delTodo', function(event, id) {</p>

<pre><code>for (var i = 0; i&lt;$scope.todos.length; i++) {
  if ($scope.todos[i]._id === id) {
    $scope.todos.splice(i,1);
  }
}
</code></pre>

<p>  });</p>

<p>}]);
```</p>

<p>One thing I haven't figured out yet is an error message similar to:</p>

<p><code>html
GET http://127.0.0.1:5984/ng-db/_local%2F4e458454e3c7031672110dc4a02c72f4 404 (Object Not Found)
</code></p>

<p>The rest works absolutely fine and although I get this error message I can't see any problems during sync.</p>

<h3>Conclusion</h3>

<p>We used AngularJS and PouchDB to build a small app that syncs serverless and stores data persistently.
 Changes are distributed automatically. They can be made inside the database, on any client or on any third
 party device that pushes changes to the connected CouchDB. AngularJS events update our models in the controller that pushes
 changes to our views via two-way data binding. It is possible to add todos to the app when offline and
 as soon you are back online all data is synced to the connected devices. For more information about
 the topic visit <a href="http://nobackend.org/">nobackend.org</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building offline applications with AngularJS and PouchDB]]></title>
    <link href="http://mircozeiss.com/building-offline-applications-with-angularjs-and-pouchdb/"/>
    <updated>2013-06-17T19:20:00+02:00</updated>
    <id>http://mircozeiss.com/building-offline-applications-with-angularjs-and-pouchdb</id>
    <content type="html"><![CDATA[<p>You may have read my other post about <a href="http://mircozeiss.com/async-couchdb-queries-with-nano-and-promises/">Async CouchDB queries with nano and promises</a>. In that post I built a small app to track how many goals a player
scored per match. Every action was stored as a single document in CouchDB. JavaScript promises were
used to access the data which allowed functions be easily reused.</p>

<p>In this article I will build the same application without any backend. I use <a href="http://pouchdb.com/">PouchDB</a> as my database
and <a href="http://angularjs.org/">AngularJS</a> as the frontend framework.</p>

<h3>PouchDB</h3>

<p>I'd like to talk a little more about PouchDB since you can find a lot of intro articles for AngularJS
but not as many for PouchDB.</p>

<blockquote><p>PouchDB is a JavaScript library that allows you to store and query data for web applications that need to work offline, and sync with an online database when you are online.</p></blockquote>

<p>PouchDB provides the same API as CouchDB but works in the browser. If you already know CouchDB you
also know how to work with PouchDB. The library is under active development and currently available as an alpha version.
Although it is an alpha version it is very stable and so far I didn't have any problems with the code.</p>

<p>The <a href="http://pouchdb.com/api.html">documentation</a> is a good starting point. Some handy features that were added recently and are not yet in the
documentation are</p>

<ul>
<li>built in map reduce functions</li>
<li>and query functions.</li>
</ul>


<h4>Built in map reduce functions</h4>

<p>You might know the built in map reduce functions from CouchDB. They are <code>_count</code>, <code>_sum</code> and <code>_stats</code>. All are written in Erlang
and allow fast access to your data. PouchDB also has those built in functions. Therefore you don't have to write your own and pass them as
a parameter into the query function. A simple query looks like the following.</p>

<p>```js
var map = function(doc) {
  if (doc.type === 'goal') {</p>

<pre><code>emit(doc.playerId, null)
</code></pre>

<p>  }
};</p>

<p>pouchdb.query({map: map, reduce: '_count'}, {key: '1'}, function(err, res) {
  if (err) console.log(err);
  console.log(res);
});
```</p>

<p>The code above loops through all documents in our db. Whenever the mapping function finds one that has the type <code>goal</code> it emits it sorted by
<code>playerId</code>. The query function afterwards simply counts all documents with the playerID <code>'1'</code> and returns the sum.</p>

<p>Here is the code for the all the built in functions so you know what they do.</p>

<p><code>_count</code> <a href="https://github.com/daleharvey/pouchdb/blob/master/src/plugins/pouchdb.mapreduce.js#L37">(source)</a> counts all documents.</p>

<p>```js
function(keys, values, rereduce){
  if (rereduce){</p>

<pre><code>return sum(values);
</code></pre>

<p>  } else {</p>

<pre><code>return values.length;
</code></pre>

<p>  }
}
```</p>

<p><code>_sum</code> <a href="https://github.com/daleharvey/pouchdb/blob/master/src/plugins/pouchdb.mapreduce.js#L33">(source)</a> returns the sum of all document values.
It would return the same value as <code>_count</code> when every document is emitted with values equals <code>1</code>.</p>

<p><code>js
function(keys, values){
  return sum(values);
}
</code></p>

<p><code>_stats</code> <a href="https://github.com/daleharvey/pouchdb/blob/master/src/plugins/pouchdb.mapreduce.js#L45">(source)</a> provides some basic statistical
analysis for our data.</p>

<p>```js
function(keys, values, rereduce){
  return {</p>

<pre><code>'sum': sum(values),
'min': Math.min.apply(null, values),
'max': Math.max.apply(null, values),
'count': values.length,
'sumsqr': (function(){
  var _sumsqr = 0;
  for(var idx in values){
    _sumsqr += values[idx] * values[idx];
  }
  return _sumsqr;
})()
</code></pre>

<p>  };
  }
```</p>

<h4>Query functions</h4>

<p>Query functions are needed to <a href="http://pouchdb.com/api.html#fetch_a_document">fetch a document</a> when you don't know the document's ID. I couldn't find anything about query
functions with individual keys in the documentation. So I looked at the tests and found the <a href="https://github.com/daleharvey/pouchdb/blob/decb29d057065f01a6121e129b24cd02240ef1b2/tests/test.views.js#L109-L124">test</a>
for opts.key.</p>

<p>```js
db.query(queryFun, {reduce: false, key: 'key2'}, function(<em>, res) {
  equal(res.rows.length, 1, 'Doc with key');
  db.query(queryFun, {reduce: false, key: 'key3'}, function(</em>, res) {</p>

<pre><code>equal(res.rows.length, 2, 'Multiple docs with key');
start();
</code></pre>

<p>  });
});
```</p>

<p>It shows that we can simply use the <code>key</code> property to look for specific results in our db. The same goes for <code>startkey</code> and <code>endkey</code>
 properties. Their documentation is in section <a href="http://pouchdb.com/api.html#fetch_documents">fetch documents</a> describing the <code>allDocs()</code> method.</p>

<h3>Marry PouchDB and AngularJS</h3>

<p>Since both frameworks are implemented independently, they don't know how to work with each other. We
have to bring PouchDB into the AngularJS world in order to have access from the controller. The best
way to do this is using a <code>service</code>.</p>

<p><code>js
services.factory('pouchdb', function() {
  Pouch.enableAllDbs = true;
  return new Pouch('myPouch');
});
</code></p>

<p>Inject this service whenever you want to use PouchDB from your controller.</p>

<p><code>js
myApp.controller('AppCtrl', ['$scope', 'pouchdb', function($scope, pouchdb) {
  // more code here
}]);
</code></p>

<h3>Wrapping PouchDB into promises</h3>

<p>The PouchDB API will probably support promises at some point <a href="https://github.com/daleharvey/pouchdb/issues/608">in the future</a>. At the moment it does not.
If you've read my post about <a href="http://mircozeiss.com/async-couchdb-queries-with-nano-and-promises/">async CouchDB queries with nano and promises</a>, you know
promises come in really handy. As AngularJS offers promises through the <code>$q</code> module we can build some wrapper functions to interact with our data.</p>

<p>The wrapper is an AngularJS <strong>factory</strong> and consists of two functions. The first one <code>add(playerId)</code> adds a goal document to the db.</p>

<p>```js
add: function(playerId) {
  var deferred = $q.defer();
  var doc = {</p>

<pre><code>type: 'goal',
playerId: playerId
</code></pre>

<p>  };
  pouchdb.post(doc, function(err, res) {</p>

<pre><code>$rootScope.$apply(function() {
  if (err) {
    deferred.reject(err)
  } else {
    deferred.resolve(res)
  }
});
</code></pre>

<p>  });
  return deferred.promise;
}
```</p>

<p>We need the <code>$rootScope.$apply()</code> function because AngularJS doesn't know what's happening inside the <code>pouchdb.post()</code> callback.
It loses the scope and would neither <code>reject</code> nor <code>resolve</code> the promise. Read more about this topic at <a href="http://jimhoskins.com/2012/12/17/angularjs-and-apply.html">AngularJS and scope.$apply</a>
by Jim Hoskins.</p>

<p>The second function <code>getScore(playerId)</code> counts all documents per player and returns the total amount. If no documents are found
for a certain <code>playerId</code> it returns 0.</p>

<p>```js
getScore: function(playerId) {
  var deferred = $q.defer();
  var map = function(doc) {</p>

<pre><code>if (doc.type === 'goal') {
  emit(doc.playerId, null)
}
</code></pre>

<p>  };
  pouchdb.query({map: map, reduce: '_count'}, {key: playerId}, function(err, res) {</p>

<pre><code>$rootScope.$apply(function() {
  if (err) {
    deferred.reject(err);
  } else {
    if (!res.rows.length) {
      deferred.resolve(0);
    } else {
      deferred.resolve(res.rows[0].value);
    }
  }
});
</code></pre>

<p>  });
  return deferred.promise;
}
```</p>

<p>We can now inject this helper service into our controller and start using it. First of all get the score for each player
on page load.</p>

<p>```js
$q.all([
  pp.getScore('1'),
  pp.getScore('2'),
  pp.getScore('3')
]).then(function(res) {</p>

<pre><code>$scope.score['1'] = res[0];
$scope.score['2'] = res[1];
$scope.score['3'] = res[2]
</code></pre>

<p>  });
```</p>

<p>A click on a button invokes the <code>incScore()</code> function that calls our <code>add()</code> from the helper service. It creates a new
document, saves it to db and calculates the new score.</p>

<p>```js
$scope.incScore = function(id) {
  pp.add(id)</p>

<pre><code>.then(function(res) {
  return pp.getScore(id);
})
.then(function(score) {
  $scope.score[id] = score;
})
</code></pre>

<p>}
```</p>

<p>A working example with all code can be found at <a href="http://plnkr.co/edit/BoxJTY?p=preview">plnkr#BoxJTY</a>. Play with the scores of each player and afterwards
close your browser. Then open your browser again and navigate to the example page. Et voilà, the individual scores stay the same. The
values were stored in the browser's db, completely offline. Be careful when you empty the cache. All
values will be lost. You will also notice that when you visit the example with a different browser the
individual scores are not the same. That's because each browser (even each browser version) uses its own
private database that is not shared with other browsers or browser versions. If you want to transfer the score
to other browsers or mobile devices you have to implement a backend solution.</p>

<h3>Testing</h3>

<p>Not long ago I tweeted the following</p>

<blockquote class="twitter-tweet"><p>when writing your next uber <a href="https://twitter.com/search/%23angularjs">#angularjs</a> blog post provide appropriate tests</p>&mdash; Mirco Zeiss (@zeMirco) <a href="https://twitter.com/zeMirco/status/344182488098291713">June 10, 2013</a></blockquote>


<script async src="http://mircozeiss.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>The AngularJS folks are quite passionate about testing and so am I. It can be annoying sometimes and of course
takes more time but it is well worth it and will one day save your a**. In addition it will improve
the quality of your code and therefore the quality of your blog post.</p>

<p>So let's write some tests for our new services. Before we start we have to think about which
things can actually be tested.</p>

<ol>
<li><code>Pouch.enableAllDbs</code> should be set to <code>true</code></li>
<li>The returned object should be an instance of Pouch</li>
<li>The name of our db should be <strong>myPouch</strong></li>
<li>The service should be able to save an object to db</li>
<li>The service should be able to retrieve an object from db</li>
</ol>


<p>When all the above tests pass we can be pretty sure that we've done a good job.</p>

<h4>1. Check if enableAllDbs is set to true</h4>

<p>Setting <code>enableAllDbs</code> to <code>true</code> isn't necessary for this small example app. However if you'd like
to obtain a list of all databases one day this feature must have been set to <code>true</code> in advance.</p>

<p>The test looks like this.</p>

<p><code>js
it('should set "enableAllDbs" to true', inject(function(pouchdb) {
  expect(Pouch.enableAllDbs).toBeTruthy();
}));
</code></p>

<p>That was easy. Just three lines of code. Cool, testing is fun!</p>

<h4>2. Verify the constructor of the object returned from the service</h4>

<p>This is also a very simple test.</p>

<p><code>js
it('should return a Pouch instance', inject(function(pouchdb) {
  expect(pouchdb instanceof Pouch).toBeTruthy();
}));
</code></p>

<p>Really that's it? Yep quite nice, right?</p>

<h4>3. Verify the name of our db</h4>

<p>I'm sorry but I have to disappoint you. Testing is not always as easy as in the first two examples. The following is an asynchronous test and that's not as
simple with AngularJS and Jasmine.</p>

<p>```js
it('should create a db with name "myPouch"', inject(function(pouchdb) {
  var result;</p>

<p>  pouchdb.info(function(err, res) {</p>

<pre><code>result = res;
</code></pre>

<p>  });</p>

<p>  waitsFor(function() {</p>

<pre><code>return result;
</code></pre>

<p>  });</p>

<p>  runs(function() {</p>

<pre><code>expect(result.db_name).toEqual('_pouch_myPouch');
</code></pre>

<p>  });</p>

<p>}));
```</p>

<p>First we have to call the <code>info()</code> method which gives us some information
about our db in the callback. Within that callback we save the info to our global variable <code>result</code>. The
<code>waitsFor()</code> and <code>runs()</code> functions are needed by Jasmine to wait for the result from our info callback and
then continue with the test.</p>

<h4>4. Test if service can save objects to db</h4>

<p>For this test we simply use our new service, save an object to the database and check for the correct callback.</p>

<p>```js
it('should allow saving new objects via a promise', inject(function(pp) {
  var result;</p>

<p>  pp.add('1').then(function(res) {</p>

<pre><code>result = res;
</code></pre>

<p>  });</p>

<p>  waitsFor(function() {</p>

<pre><code>return result;
</code></pre>

<p>  });</p>

<p>  runs(function() {</p>

<pre><code>expect(result.ok).toBeTruthy();
</code></pre>

<p>  });</p>

<p>}));
```</p>

<h4>5. Test if service can retrieve objects from db</h4>

<p>For our last test we try to retrieve the before saved object and check whether we got the right score.</p>

<p>```js
it('should allow retrieving new objects via a promise', inject(function(pp) {
  var result;</p>

<p>  pp.getScore('1').then(function(res) {</p>

<pre><code>result = res;
</code></pre>

<p>  });</p>

<p>  waitsFor(function() {</p>

<pre><code>return result;
</code></pre>

<p>  });</p>

<p>  runs(function() {</p>

<pre><code>expect(result).toBe(1);
</code></pre>

<p>  });</p>

<p>}));
```</p>

<p>That's it! We can now safely assume that our service is working correctly and does what we expect.</p>

<h3>Conclusion</h3>

<p>AngularJS and PouchDB are awesome frameworks. I hope their engineers
and the community will support both for a long time to come. Combined they are a match made in heaven. AngularJS gives you all the
tools to keep your frontend code nice and tidy while PouchDB takes care of your data. Use both to write
offline applications that run in the browser on every modern device. See the final app at <a href="http://plnkr.co/edit/BoxJTY?p=preview">plnkr#BoxJTY</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using CSRF protection with Express and Angular]]></title>
    <link href="http://mircozeiss.com/using-csrf-with-express-and-angular/"/>
    <updated>2013-05-19T19:20:00+02:00</updated>
    <id>http://mircozeiss.com/using-csrf-with-express-and-angular</id>
    <content type="html"><![CDATA[<p>In this post I'll demonstrate how to use CSRF protection for Express and Angular apps. Both frameworks have CSRF protection
built in but don't understand each other without manual adjustments.</p>

<p>Express is built on top of the <a href="http://www.senchalabs.org/connect/">connect</a> framework which has a native <a href="http://www.senchalabs.org/connect/csrf.html">csrf</a> middleware. It generates a random string token
that is unique for each user. The token is saved in the user's session on the server. On every request which mutates state,
usually <code>PUT</code>, <code>POST</code> and <code>DELETE</code> requests, the middleware validates whether the CSRF token sent from the client is the
same as the token stored in the user's session on the server. If it isn't the client gets the answer <code>403 Forbidden</code>. The following is taken from the docs and describes where the middleware is looking for the token.</p>

<blockquote><p>The default value function checks req.body generated by the bodyParser() middleware, req.query generated by query(), and the "X-CSRF-Token" header field.</p></blockquote>

<p>Angular also has CSRF features built into its $http service.</p>

<blockquote><p>When performing XHR requests, the $http service reads a token from a cookie called XSRF-TOKEN and sets it as the HTTP header X-XSRF-TOKEN</p></blockquote>

<p>Both frameworks offer CSRF protection. To make them work together we have to make some adjustments. Follow the steps below to make CSRF work for your next app</p>

<ol>
<li>Add CSRF middleware to your Express app</li>
<li>Tell the middleware to use the right token</li>
<li>Use custom middleware to set a cookie for Angular</li>
<li>Use Angular $http library for XHR requests</li>
</ol>


<h3>1. Adding CSRF middleware to an Express app</h3>

<p>In the first step we have to add the CSRF middleware to our app. As it requires sessions we also have to
add some extra session middleware. You don't have to install anything because they come with Express.</p>

<p><code>js
app.use(express.cookieParser('your secret here'));
app.use(express.cookieSession());
app.use(express.csrf());
</code></p>

<h3>2. Telling CSRF middleware to use the right token</h3>

<p>As mentioned earlier the default CSRF middleware looks in <code>req.body</code>, <code>req.query</code> and the <code>X-CSRF-Token</code> header for the token.
Angular uses none of the methods but instead its own header <code>X-XSRF-TOKEN</code>. Therefor we have to tell Express where to look
for the token delivered by Angular. Create a new function that returns this token from the <code>request</code> object.</p>

<p>```js
var csrfValue = function(req) {
  var token = (req.body &amp;&amp; req.body._csrf)</p>

<pre><code>|| (req.query &amp;&amp; req.query._csrf)
|| (req.headers['x-csrf-token'])
|| (req.headers['x-xsrf-token']);
</code></pre>

<p>  return token;
};
```</p>

<p>The function above is the default function taken from connect. I just added the last line <code>req.headers['x-xsrf-token']</code>.
It still accepts the other methods but also finds the incoming token from Angular. Now pass this function to the CSRF middleware from step 1.</p>

<p><code>js
app.use(express.csrf({value: csrfValue}));
</code></p>

<p>Cool, Express can now find the token sent by Angular. One thing that is missing is sending the token from our Express server
to our Angular client.</p>

<h3>3. Using custom middleware to set a cookie for Angular</h3>

<p>Angular's $http library reads the token from the <code>XSRF-TOKEN</code> cookie. We therefore have to set this cookie and send it to
the client. Setting a cookie in Express is done via the <code>res.cookie('name', 'value')</code> function. The name is obviously <code>XSRF-TOKEN</code>.
The value is read from the user's session. The key <code>req.session._csrf</code> is automatically generated by the csrf middleware.</p>

<p><code>js
app.use(function(req, res, next) {
  res.cookie('XSRF-TOKEN', req.session._csrf);
  next();
});
</code></p>

<h3>4. Using Angular $http library for XHR requests</h3>

<p>We now have everything in place to use Angular's $http library without further adjustments. A simple
controller could look like the following</p>

<p>```js
var myApp = angular.module('myApp',[]);</p>

<p>myApp.controller('csrfCtrl', ['$scope', '$http', function($scope, $http) {</p>

<p>  $scope.submit = function() {</p>

<pre><code>$http.post('/', {value: $scope.value})
  .success(function(data) {
    $scope.answer = data
  })
  .error(function() {
    console.log('err')
  })
</code></pre>

<p>  }</p>

<p>}]);
```</p>

<p>No adjustments are need on the client and your code should work as is.</p>

<p><img src="https://s3.amazonaws.com/mircozeiss.com/csrf-express-angular.png" title="CSRF example for Express and Angular" ></p>

<h3>Conclusion</h3>

<p>As you've seen adding CSRF protection to an app built with Express and Angular is really simple. There shouldn't be
any reason not to use this technique for your next app. It adds another layer of security. The underlying principles can also
be applied to apps built with a different stack. Reading their documentations is always a good start.</p>

<p>You can find the code at GitHub <a href="https://github.com/zeMirco/csrf-express-angular">zeMirco/csrf-express-angular</a> and a running example at Heroku <a href="http://arcane-headland-6078.herokuapp.com/">http://arcane-headland-6078.herokuapp.com/</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to pass JavaScript variables from a server to Angular.js]]></title>
    <link href="http://mircozeiss.com/how-to-pass-javascript-variables-from-a-server-to-angular/"/>
    <updated>2013-04-13T00:00:00+02:00</updated>
    <id>http://mircozeiss.com/how-to-pass-javascript-variables-from-a-server-to-angular</id>
    <content type="html"><![CDATA[<p>I came across the problem of sending JavaScript variables from my backend,
in this case an <a href="http://expressjs.com/">Express.js</a> server,
to my frontend, means an <a href="http://angularjs.org/">Angular.js</a> controller. I'm using <a href="http://jade-lang.com/">Jade</a> as my template engine but the
presented solutions should work with others, too.</p>

<p>Basically you've got three options for doing this:</p>

<ol>
<li>Put the variable into the view file inside a <code>script</code> tag</li>
<li>Make an HTTP request from Angular and serve the data as JSON from the
backend</li>
<li>Be smart and use <code>ng-init</code></li>
</ol>


<p>At the end of the article you find a link to a GitHub repo containing working
examples for all the presented solutions. To play with the code fork and
modify it according to your needs or start from scratch and add code while
reading on. So, let's start.</p>

<p>First create an empty directory, use <code>express</code> command to create all necessary files and run
<code>npm install</code> to download additional modules. At the end start your server with <code>node app.js</code>.</p>

<p><code>bash
mkdir express-to-ngcontroller
cd express-to-ngcontroller
express
npm install
node app.js
</code></p>

<p>Afterwards you should see the message</p>

<p><code>bash
Express server listening on port 3000
</code></p>

<p>So far we've just set up our backend. Now it's time to add some Angular code to your <code>layout.jade</code>.</p>

<p>```
doctype 5
html(ng-app)
  head</p>

<pre><code>title= title
link(rel='stylesheet', href='http://mircozeiss.com/stylesheets/style.css')
script(src="https://ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular.min.js")
script(src="/javascripts/controller.js")
</code></pre>

<p>  body</p>

<pre><code>a(href="/solution-one") solution one
span -
a(href="/solution-two") solution two
span -
a(href="/solution-three") solution three
block content
</code></pre>

<p>```</p>

<p>Let's have a look at the above code. Activate Angular for the whole page by
adding <code>ng-app</code> as an attribute to the <code>html</code> tag. Load <code>angular.min.js</code> from
 Google CDN and <code>controller.js</code> from file. Inside the body I created a basic
 menu to navigate from one
solution to the other.</p>

<p>Last but not least create some dummy data at the server. In production this
data is loaded from a database, but in this example I want to keep everything
 nice and simple. Copy the following code to your <code>app.js</code>.</p>

<p>```js
var users = {
  1: {</p>

<pre><code>name: 'john',
email: 'john@email.com'
</code></pre>

<p>  },
  2: {</p>

<pre><code>name: 'peter',
email: 'peter@email.com'
</code></pre>

<p>  },
  3: {</p>

<pre><code>name: 'max',
email: 'max@email.com'
</code></pre>

<p>  }
};
```</p>

<p>Now everything should be set up and we can start tinkering with the different
 solutions.</p>

<h3>1. Put variable inside view file</h3>

<p>Inside your <code>app.js</code> file create an additional route for <code>GET /solution-one</code></p>

<p>```javascript
app.get('/solution-one', function(req, res) {
  res.render('solutionOne', {</p>

<pre><code>title: 'Express and Angular marriage',
users: users
</code></pre>

<p>  })
});
```</p>

<p>We pass our <code>users</code> object to the view as a local variable named
<code>users</code>. Running this code would throw an error as we haven't created the view
<code>solutionOne.jade</code> yet. Create this file inside the <code>views/</code> directory and
put the following code inside</p>

<p></p>

<p>```
extends layout</p>

<p>block content
  div(ng-controller="UserCtrl")</p>

<pre><code>h1= title
p Welcome to #{title}
ul
  li(ng-repeat="user in users") {{ user.name }} - {{user.email}}
</code></pre>

<p>  script</p>

<pre><code>var users = !{JSON.stringify(users)}
</code></pre>

<p>```
</p>

<p>With <code>ng-controller="UserCtrl"</code> we tell Angular which controller we'd like
 to use for all the DOM children of this element. At the bottom of the file
 we've put some extra JavaScript with a global variable called <code>users</code> that
 loads the contents from the local variable <code>users</code> passed to the view.
 Notice that we have to use <code>!{}</code> instead of <code>#{}</code>, which is usually used in
 Jade for interpolation. However <code>#{}</code> escapes HTML code and would create
 something like this</p>

<p><code>js
var users = {&amp;quot;1&amp;quot;:{&amp;quot;name&amp;quot;:&amp;quot;john&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;john@email.com&amp;quot;},&amp;quot;2&amp;quot;:{&amp;quot;name&amp;quot;:&amp;quot;peter&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;peter@email.com&amp;quot;},&amp;quot;3&amp;quot;:{&amp;quot;name&amp;quot;:&amp;quot;max&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;max@email.com&amp;quot;}}
</code></p>

<p>That's not what we want. We want a nicely formatted String representation of
our JSON object. That's why we need <code>!{}</code>.</p>

<p>Then we need to load the content of this variable into our Angular scope.
This is necessary for the <code>ng-repeat</code> directive as it doesn't work with
variables, which are outside of the Angular scope. Open <code>controller.js</code> and
 put the following code inside.</p>

<p><code>js
function UserCtrl($scope) {
  $scope.users = users;
}
</code></p>

<p>Start the server with <code>node app.js</code> and navigate to <code>/solution-one</code>. You
should see a list with our three users where each list item contains the
<code>name</code> and <code>email</code>. Nice, solution one works but let's have a look at the
pros and cons.</p>

<h4>Pro</h4>

<p>Solution one is probably the easiest to understand and fastest to implement.
Every step is comprehensible and nothing fancy is going on.</p>

<h4>Contra</h4>

<p>Using global variables in JavaScript is a No-Go. However in this case it is
not that bad as the content of the global variable <code>users</code> is loaded into
scope at page load. Manipulating <code>users</code> afterwards doesn't have any effects
on the scope and our frontend.</p>

<p>Still it is not the best solution. Let's look at another one.</p>

<h3>2. HTTP request from Angular to a JSON API</h3>

<p>Inside <code>app.js</code> create another route for <code>GET /solution-two</code></p>

<p>```js
app.get('/solution-two', function(req, res) {
  res.render('solutionTwo', {</p>

<pre><code>title: 'Express and Angular marriage'
</code></pre>

<p>  })
});
```</p>

<p>and create the view <code>solutionTwo.jade</code> inside the <code>views/</code> folder with the
following content</p>

<p></p>

<p>```
extends layout</p>

<p>block content
  div(ng-controller="UserTwoCtrl")</p>

<pre><code>h1= title
p Welcome to #{title}
ul
  li(ng-repeat="user in users") {{user.name}} - {{user.email}}
</code></pre>

<p>```</p>

<p></p>

<p>You might have noticed that we haven't passed any data as local variables
from our Express backend to the view. When you start the server and navigate
with your browser to <code>/solution-one</code> you won't see any users listed. We did
add another controller <code>UserTwoCtrl</code> to our view and we will add some
functionality now.</p>

<p>```js
function UserTwoCtrl($scope, $http) {
  $http.get('/solution-two/data').success(function(data) {</p>

<pre><code>$scope.users = data
</code></pre>

<p>  })
}
```</p>

<p>As soon as the controller is initiated by Angular it automatically makes a
 GET request to <code>/solution-two/data</code> and assigns the fetched data to <code>$scope.users</code>.
 Now refresh the page and see what happened. You should see an
 error saying</p>

<p><code>
Failed to load resource: the server responded with a status of 404 (Not Found)
</code></p>

<p>Your terminal running the server should log</p>

<p><code>
GET /solution-two/data 404
</code></p>

<p>It simply means that we haven't implemented the route <code>GET
/solution-two/data</code> yet. So let's do this by adding the following code to the
 <code>app.js</code> file</p>

<p><code>js
app.get('/solution-two/data', function(req, res) {
  res.json(users);
});
</code></p>

<p>Restart the server and with your browser go to <code>/solution-two/data</code>. You
should see our <code>users</code> object as JSON. Now go to <code>/solution-two</code> and, voila,
everything works as expected. Three list items are created each showing name
and email. The screenshot shows the extra request as the last action.</p>

<p><img src="https://s3.amazonaws.com/mircozeiss.com/angular-extra-http-request.png" title="Angular HTTP request fetching JSON data" ></p>

<h4>Pro</h4>

<p>Making HTTP request in order to get JSON data is common these days.
Every major web service offers some kind of API to allow third party access.
In theses cases, where you don't have the necessary data on your own server,
it is the best solution to make an HTTP request from your frontend. You
could, of course, make the request from the server, get the data and send it
to the client as shown in solution one. This, however,
adds unnecessary overhead to our server and by calling the API from the
client we can save valuable resources.</p>

<h4>Contra</h4>

<p>The second solution needs the most additional code and also an extra route
from which the data is served as JSON. This can get a bit messy because you
basically have to serve every route twice. Once for the view and once for the
data. Therefore it is still not the perfect solution, which leads us to our last
method.</p>

<h3>3. Be smart and use ng-init</h3>

<p>The third and probably best solution makes use of the <a href="http://docs-angularjs-org-dev.appspot.com/api/ng.directive:ngInit">ngInit</a> directive.</p>

<blockquote><p>The ngInit directive specifies initialization tasks to be executed before
the template enters execution mode during bootstrap.</p></blockquote>

<p>What does that mean?</p>

<p>Short answer: The expression (variable + content) given to ngInit is loaded
into scope and made available under this name.</p>

<p>Let's have a look at the example from the Angular docs</p>

<p></p>

<p>```html
&lt;!doctype html>
<html ng-app>
  <head></p>

<pre><code>&lt;script src="http://code.angularjs.org/angular-1.0.2.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;div ng-init="greeting='Hello'; person='World'"&gt;
  {{greeting}} {{person}}!
&lt;/div&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p></p>

<p>The variable <code>$scope.greeting</code> holds the String <code>'Hello'</code> and <code>$scope.person='World'</code>. Both are available inside the scope although not explicitly
 specified inside a controller.</p>

<p>We could rewrite and simplify the example like this</p>

<p><code>js
function MyCtrl($scope) {
  $scope.greeting = 'Hello';
  $scope.person = 'World'
}
</code></p>

<p>and</p>

<p></p>

<p>```html
&lt;!doctype html>
<html ng-app>
  <head></p>

<pre><code>&lt;script src="http://code.angularjs.org/angular-1.0.2.min.js"&gt;&lt;/script&gt;
&lt;script src="http://mircozeiss.com/javascripts/controller.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;div ng-controller="MyCtrl"&gt;
  {{greeting}} {{person}}!
&lt;/div&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<p></p>

<p>So let's combine this approach and our initial problem. First,
add a new route <code>GET /solution-three</code> to <code>app.js</code> and create the
corresponding view <code>solutionThree.jade</code>:</p>

<p>```js
app.get('/solution-three', function(req, res) {
  res.render('solutionThree', {</p>

<pre><code>title: 'Express and Angular marriage',
users: users
</code></pre>

<p>  })
});
```</p>

<p></p>

<p>```
extends layout</p>

<p>block content
  div(ng-controller="UserThreeCtrl", ng-init="users= #{JSON.stringify(users)}")</p>

<pre><code>h1= title
p Welcome to #{title}
ul
  li(ng-repeat="user in users") {{user.name}} - {{user.email}}
</code></pre>

<p>```</p>

<p></p>

<p>As you can see we pass our <code>users</code> variable to the Jade template as a local
variable. Inside the template we convert the JSON object to its String
representation and assign it to the Angular variable <code>users</code>. Later on we
have access to this variable and use a regular <code>ngRepeat</code> directive to create
 the list of users. Start the server, navigate to <code>/solution-three</code> and
 you should the expected list of users.</p>

<h4>Pro</h4>

<p>It is the cleanest solution. We don't have to use global variables and we
don't have to make an extra HTTP request. It is also the solution that needs
the least amount of code.</p>

<h4>Contra</h4>

<p>The concept behind <code>ngInit</code> might be a bit confusing at the beginning. For
further insights and to understand how Angular actually renders a page I
recommend reading <a href="http://docs.angularjs.org/guide/bootstrap">Bootstrap</a> (not
 related to <a href="http://twitter.github.io/bootstrap/">Twitter's Bootstrap</a>) and
 <a href="http://docs.angularjs.org/guide/compiler">HTML Compiler</a>.</p>

<h3>Conclusion</h3>

<p>You've learned that several solutions exist for passing data from your backend to an Angular
controller. While solution one being the worst it depends on your architecture and your requirements
whether solution two or three fits better. I personally tend to use the last solution as I have to make
one less request to the server.</p>

<p>As promised at the beginning you can find the working example at GitHub under
 <a href="https://github.com/zeMirco/zemirco.github.io/tree/source/code-examples/server-vars-ngcontroller">server-vars-ngcontroller</a>.</p>

<p><strong>Pro Tip</strong>: Don't mix Jade's <code>for user in users</code> and <code>ng-repeat="user in users"</code>
 from Angular. I did that once at the beginning and was totally frustrated
 because nothing worked as expected. You can image my feelings when I found
 that mistake. Well, it was late that night!</p>
]]></content>
  </entry>
  
</feed>
